
stmpsm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002744  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002850  08002850  00003850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c8  080028c8  0000417c  2**0
                  CONTENTS
  4 .ARM          00000000  080028c8  080028c8  0000417c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028c8  080028c8  0000417c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c8  080028c8  000038c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028cc  080028cc  000038cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  080028d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000017c  08002a4c  0000417c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08002a4c  00004364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000417c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d91  00000000  00000000  000041a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a73  00000000  00000000  00008f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  0000a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000471  00000000  00000000  0000b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dce  00000000  00000000  0000b471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000868e  00000000  00000000  0002323f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081b82  00000000  00000000  0002b8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad44f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d70  00000000  00000000  000ad494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000af204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002838 	.word	0x08002838

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08002838 	.word	0x08002838

0800014c <timer_expired>:
#include "blink_control.h"
#include "timer.h"
#include "main.h"

// Funciones de condición para las transiciones de estado
static int timer_expired(void *context) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    BlinkControl *blink_control = (BlinkControl *)context;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	60fb      	str	r3, [r7, #12]
    return timer_has_expired(&blink_control->blink_timer);
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	330c      	adds	r3, #12
 800015c:	4618      	mov	r0, r3
 800015e:	f000 fd11 	bl	8000b84 <timer_has_expired>
 8000162:	4603      	mov	r3, r0
}
 8000164:	4618      	mov	r0, r3
 8000166:	3710      	adds	r7, #16
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}

0800016c <on_state_led_off>:

// Funciones de acción para cada estado
void on_state_led_off(void *context) {
 800016c:	b580      	push	{r7, lr}
 800016e:	b084      	sub	sp, #16
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
    BlinkControl *blink_control = (BlinkControl *)context;
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(blink_control->LED_Port, blink_control->LED_Pin, GPIO_PIN_SET);  // Apagar LED
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	6958      	ldr	r0, [r3, #20]
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	8b1b      	ldrh	r3, [r3, #24]
 8000180:	2201      	movs	r2, #1
 8000182:	4619      	mov	r1, r3
 8000184:	f001 f827 	bl	80011d6 <HAL_GPIO_WritePin>
    timer_restart(&blink_control->blink_timer);
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	330c      	adds	r3, #12
 800018c:	4618      	mov	r0, r3
 800018e:	f000 fcec 	bl	8000b6a <timer_restart>
}
 8000192:	bf00      	nop
 8000194:	3710      	adds	r7, #16
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}

0800019a <on_state_led_on>:

void on_state_led_on(void *context) {
 800019a:	b580      	push	{r7, lr}
 800019c:	b084      	sub	sp, #16
 800019e:	af00      	add	r7, sp, #0
 80001a0:	6078      	str	r0, [r7, #4]
    BlinkControl *blink_control = (BlinkControl *)context;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(blink_control->LED_Port, blink_control->LED_Pin, GPIO_PIN_RESET);  // Encender LED
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	6958      	ldr	r0, [r3, #20]
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	8b1b      	ldrh	r3, [r3, #24]
 80001ae:	2200      	movs	r2, #0
 80001b0:	4619      	mov	r1, r3
 80001b2:	f001 f810 	bl	80011d6 <HAL_GPIO_WritePin>
    timer_restart(&blink_control->blink_timer);
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	330c      	adds	r3, #12
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 fcd5 	bl	8000b6a <timer_restart>
}
 80001c0:	bf00      	nop
 80001c2:	3710      	adds	r7, #16
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}

080001c8 <blink_control_init>:
    {LEDOffTransitions, 1, on_state_led_off},           // Estado LED_OFF
    {LEDOnTransitions, 1, on_state_led_on}              // Estado LED_ON
};

// Inicializar la FSM de BlinkControl
void blink_control_init(BlinkControl *blink_control, GPIO_TypeDef *LED_Port, uint16_t LED_Pin, uint32_t initial_period) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	603b      	str	r3, [r7, #0]
 80001d4:	4613      	mov	r3, r2
 80001d6:	80fb      	strh	r3, [r7, #6]
    fsm_init(&blink_control->fsm, BlinkFSMStates, LED_OFF, blink_control);  // Iniciar FSM en LED_OFF
 80001d8:	68f8      	ldr	r0, [r7, #12]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	2200      	movs	r2, #0
 80001de:	4909      	ldr	r1, [pc, #36]	@ (8000204 <blink_control_init+0x3c>)
 80001e0:	f000 f95c 	bl	800049c <fsm_init>
    blink_control->LED_Port = LED_Port;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	615a      	str	r2, [r3, #20]
    blink_control->LED_Pin = LED_Pin;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	88fa      	ldrh	r2, [r7, #6]
 80001ee:	831a      	strh	r2, [r3, #24]
    timer_start(&blink_control->blink_timer, initial_period);  // Iniciar temporizador de parpadeo
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	330c      	adds	r3, #12
 80001f4:	6839      	ldr	r1, [r7, #0]
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fca6 	bl	8000b48 <timer_start>
}
 80001fc:	bf00      	nop
 80001fe:	3710      	adds	r7, #16
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	20000010 	.word	0x20000010

08000208 <blink_control_update>:

// Actualizar la FSM
void blink_control_update(BlinkControl *blink_control) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
    fsm_update(&blink_control->fsm);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f957 	bl	80004c6 <fsm_update>
}
 8000218:	bf00      	nop
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <set_blink_period>:

// Establecer el período de parpadeo
void set_blink_period(BlinkControl *blink_control, uint32_t period) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
    timer_update_duration(&blink_control->blink_timer, period);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	330c      	adds	r3, #12
 800022e:	6839      	ldr	r1, [r7, #0]
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fcbc 	bl	8000bae <timer_update_duration>
}
 8000236:	bf00      	nop
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}

0800023e <is_button_pressed>:

#include <debouncer.h>
#include "timer.h"

// Condition functions for state transitions
static int is_button_pressed(void *context) {
 800023e:	b580      	push	{r7, lr}
 8000240:	b084      	sub	sp, #16
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
    DebouncedSwitch *debounced_switch = (DebouncedSwitch *)context;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	60fb      	str	r3, [r7, #12]
    return HAL_GPIO_ReadPin(debounced_switch->GPIOx, debounced_switch->GPIO_Pin) == GPIO_PIN_SET;}
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	695a      	ldr	r2, [r3, #20]
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	8b1b      	ldrh	r3, [r3, #24]
 8000252:	4619      	mov	r1, r3
 8000254:	4610      	mov	r0, r2
 8000256:	f000 ffa7 	bl	80011a8 <HAL_GPIO_ReadPin>
 800025a:	4603      	mov	r3, r0
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf0c      	ite	eq
 8000260:	2301      	moveq	r3, #1
 8000262:	2300      	movne	r3, #0
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4618      	mov	r0, r3
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}

0800026e <is_button_pressed_and_timer_expired>:

static int is_button_pressed_and_timer_expired(void *context) {
 800026e:	b580      	push	{r7, lr}
 8000270:	b084      	sub	sp, #16
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
    DebouncedSwitch *debounced_switch = (DebouncedSwitch *)context;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	60fb      	str	r3, [r7, #12]
    return timer_has_expired(&debounced_switch->debounce_timer) && HAL_GPIO_ReadPin(debounced_switch->GPIOx, debounced_switch->GPIO_Pin) == GPIO_PIN_SET;}
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	330c      	adds	r3, #12
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fc80 	bl	8000b84 <timer_has_expired>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d00c      	beq.n	80002a4 <is_button_pressed_and_timer_expired+0x36>
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	695a      	ldr	r2, [r3, #20]
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	8b1b      	ldrh	r3, [r3, #24]
 8000292:	4619      	mov	r1, r3
 8000294:	4610      	mov	r0, r2
 8000296:	f000 ff87 	bl	80011a8 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	2b01      	cmp	r3, #1
 800029e:	d101      	bne.n	80002a4 <is_button_pressed_and_timer_expired+0x36>
 80002a0:	2301      	movs	r3, #1
 80002a2:	e000      	b.n	80002a6 <is_button_pressed_and_timer_expired+0x38>
 80002a4:	2300      	movs	r3, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <is_button_released_and_timer_expired>:

static int is_button_released_and_timer_expired(void *context) {
 80002ae:	b580      	push	{r7, lr}
 80002b0:	b084      	sub	sp, #16
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
    DebouncedSwitch *debounced_switch = (DebouncedSwitch *)context;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	60fb      	str	r3, [r7, #12]
    return timer_has_expired(&debounced_switch->debounce_timer) && HAL_GPIO_ReadPin(debounced_switch->GPIOx, debounced_switch->GPIO_Pin) == GPIO_PIN_RESET;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	330c      	adds	r3, #12
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fc60 	bl	8000b84 <timer_has_expired>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d00c      	beq.n	80002e4 <is_button_released_and_timer_expired+0x36>
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	695a      	ldr	r2, [r3, #20]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	8b1b      	ldrh	r3, [r3, #24]
 80002d2:	4619      	mov	r1, r3
 80002d4:	4610      	mov	r0, r2
 80002d6:	f000 ff67 	bl	80011a8 <HAL_GPIO_ReadPin>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d101      	bne.n	80002e4 <is_button_released_and_timer_expired+0x36>
 80002e0:	2301      	movs	r3, #1
 80002e2:	e000      	b.n	80002e6 <is_button_released_and_timer_expired+0x38>
 80002e4:	2300      	movs	r3, #0
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <on_state_pressed>:
    {is_button_pressed_and_timer_expired, SWITCH_PRESSED}
};


// Action functions
void on_state_pressed(void *context) {
 80002ee:	b580      	push	{r7, lr}
 80002f0:	b084      	sub	sp, #16
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
    DebouncedSwitch *debounced_switch = (DebouncedSwitch *)context;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60fb      	str	r3, [r7, #12]
    timer_start(&debounced_switch->debounce_timer, 50);  // Start debounce timer
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	330c      	adds	r3, #12
 80002fe:	2132      	movs	r1, #50	@ 0x32
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fc21 	bl	8000b48 <timer_start>
}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <on_state_released>:

void on_state_released(void *context) {
 800030e:	b580      	push	{r7, lr}
 8000310:	b084      	sub	sp, #16
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
    DebouncedSwitch *debounced_switch = (DebouncedSwitch *)context;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	60fb      	str	r3, [r7, #12]
    timer_start(&debounced_switch->debounce_timer, 50);  // Start debounce timer
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	330c      	adds	r3, #12
 800031e:	2132      	movs	r1, #50	@ 0x32
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fc11 	bl	8000b48 <timer_start>
}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <debounced_switch_init>:
    {PressedTransitions, 1, on_state_pressed},  // SWITCH_PRESSED state
    {ReleasedTransitions, 1, on_state_released} // SWITCH_RELEASED state
};

// Initialize the debounced switch FSM
void debounced_switch_init(DebouncedSwitch *debounced_switch, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	4613      	mov	r3, r2
 800033c:	80fb      	strh	r3, [r7, #6]
    fsm_init(&debounced_switch->fsm, DebouncedSwitchFSM, SWITCH_IDLE, debounced_switch);  // Pass context
 800033e:	68f8      	ldr	r0, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	2200      	movs	r2, #0
 8000344:	4909      	ldr	r1, [pc, #36]	@ (800036c <debounced_switch_init+0x3c>)
 8000346:	f000 f8a9 	bl	800049c <fsm_init>
    debounced_switch->GPIOx = GPIOx;
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	68ba      	ldr	r2, [r7, #8]
 800034e:	615a      	str	r2, [r3, #20]
    debounced_switch->GPIO_Pin = GPIO_Pin;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	88fa      	ldrh	r2, [r7, #6]
 8000354:	831a      	strh	r2, [r3, #24]
    timer_start(&debounced_switch->debounce_timer, 50);  // Example: Start debounce timer for 50ms
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	330c      	adds	r3, #12
 800035a:	2132      	movs	r1, #50	@ 0x32
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fbf3 	bl	8000b48 <timer_start>
}
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000040 	.word	0x20000040

08000370 <debounced_switch_update>:

// Update the FSM
void debounced_switch_update(DebouncedSwitch *debounced_switch) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
    // Perform state transitions
    fsm_update(&debounced_switch->fsm);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f8a3 	bl	80004c6 <fsm_update>
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <get_debounced_switch_state>:

// Get the debounced GPIO state
GPIO_PinState get_debounced_switch_state(DebouncedSwitch *debounced_switch) {
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
    return (debounced_switch->fsm.currentState == SWITCH_PRESSED) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	2b01      	cmp	r3, #1
 8000396:	bf0c      	ite	eq
 8000398:	2301      	moveq	r3, #1
 800039a:	2300      	movne	r3, #0
 800039c:	b2db      	uxtb	r3, r3
}
 800039e:	4618      	mov	r0, r3
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <is_high>:
 */

#include "edge_detector.h"

// Condition functions for edge detection FSM
static int is_high(void *context) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
    EdgeDetector *edge_detector = (EdgeDetector *)context;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	60fb      	str	r3, [r7, #12]
    return get_debounced_switch_state(edge_detector->switch_instance) == GPIO_PIN_SET;
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ffe5 	bl	8000388 <get_debounced_switch_state>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	bf0c      	ite	eq
 80003c4:	2301      	moveq	r3, #1
 80003c6:	2300      	movne	r3, #0
 80003c8:	b2db      	uxtb	r3, r3
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <is_low>:

static int is_low(void *context) {
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b084      	sub	sp, #16
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
    EdgeDetector *edge_detector = (EdgeDetector *)context;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	60fb      	str	r3, [r7, #12]
    return get_debounced_switch_state(edge_detector->switch_instance) == GPIO_PIN_RESET;
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ffd0 	bl	8000388 <get_debounced_switch_state>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	bf0c      	ite	eq
 80003ee:	2301      	moveq	r3, #1
 80003f0:	2300      	movne	r3, #0
 80003f2:	b2db      	uxtb	r3, r3
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <on_state_idle_high>:

// on_state functions for each state
void on_state_idle_high(void *context) {
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
    // No specific action required for idle_high
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr

0800040e <on_state_idle_low>:

void on_state_idle_low(void *context) {
 800040e:	b480      	push	{r7}
 8000410:	b083      	sub	sp, #12
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
    // No specific action required for idle_low
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <on_state_rising_edge>:

void on_state_rising_edge(void *context) {
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
    // Edge detected, execute any necessary actions (logging, etc.)
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr

08000432 <on_state_falling_edge>:

void on_state_falling_edge(void *context) {
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
    // Edge detected, execute any necessary actions (logging, etc.)
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <edge_detector_init>:
    {RisingEdgeTransitions, 2, on_state_rising_edge},     // RISING_EDGE state
    {FallingEdgeTransitions, 2, on_state_falling_edge}    // FALLING_EDGE state
};

// Initialize the edge detector
void edge_detector_init(EdgeDetector *edge_detector, DebouncedSwitch *switch_instance) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
    fsm_init(&edge_detector->fsm, EdgeFSMStates, IDLE_LOW, edge_detector);  // Start in IDLE_LOW
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2201      	movs	r2, #1
 8000454:	4904      	ldr	r1, [pc, #16]	@ (8000468 <edge_detector_init+0x24>)
 8000456:	f000 f821 	bl	800049c <fsm_init>
    edge_detector->switch_instance = switch_instance;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	60da      	str	r2, [r3, #12]
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000094 	.word	0x20000094

0800046c <edge_detector_update>:

// Update the edge detector FSM
void edge_detector_update(EdgeDetector *edge_detector) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
    fsm_update(&edge_detector->fsm);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f825 	bl	80004c6 <fsm_update>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <get_edge_detector_state>:

// Get the current state based on the edge detector FSM state
EdgeFSMState get_edge_detector_state(EdgeDetector *edge_detector) {
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
    return (EdgeFSMState)edge_detector->fsm.currentState;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	b2db      	uxtb	r3, r3
}
 8000492:	4618      	mov	r0, r3
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <fsm_init>:
#include "main.h"

/**
 * @brief Initializes the FSM with given states, initial state, and context.
 */
void fsm_init(FSM *fsm, const FSMState *states, unsigned long initial_state, void *context) {
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
 80004a8:	603b      	str	r3, [r7, #0]
    fsm->states = states;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	68ba      	ldr	r2, [r7, #8]
 80004ae:	601a      	str	r2, [r3, #0]
    fsm->currentState = initial_state;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	605a      	str	r2, [r3, #4]
    fsm->context = context;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	683a      	ldr	r2, [r7, #0]
 80004ba:	609a      	str	r2, [r3, #8]
}
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <fsm_update>:

/**
 * @brief Updates the FSM based on the conditions of the current state.
 */
void fsm_update(FSM *fsm) {
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b08a      	sub	sp, #40	@ 0x28
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
    unsigned long oldState = fsm->currentState;  // Store the current state before checking transitions
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	623b      	str	r3, [r7, #32]
    FSMState currentState = fsm->states[fsm->currentState];
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6819      	ldr	r1, [r3, #0]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	685a      	ldr	r2, [r3, #4]
 80004dc:	4613      	mov	r3, r2
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	4413      	add	r3, r2
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	18ca      	adds	r2, r1, r3
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Check all transitions (one for each of the potential next states)
    for (unsigned long i = 0; i < currentState.numTransitions; i++) {
 80004f0:	2300      	movs	r3, #0
 80004f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80004f4:	e016      	b.n	8000524 <fsm_update+0x5e>
        if (currentState.transitions[i].condition(fsm->context)) {  // Pass the context to the condition function
 80004f6:	697a      	ldr	r2, [r7, #20]
 80004f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004fa:	00db      	lsls	r3, r3, #3
 80004fc:	4413      	add	r3, r2
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	6892      	ldr	r2, [r2, #8]
 8000504:	4610      	mov	r0, r2
 8000506:	4798      	blx	r3
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d007      	beq.n	800051e <fsm_update+0x58>
            fsm->currentState = currentState.transitions[i].nextState;  // Transition to the corresponding next state
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4413      	add	r3, r2
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	605a      	str	r2, [r3, #4]
            break;  // Exit after the first matched condition
 800051c:	e006      	b.n	800052c <fsm_update+0x66>
    for (unsigned long i = 0; i < currentState.numTransitions; i++) {
 800051e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000520:	3301      	adds	r3, #1
 8000522:	627b      	str	r3, [r7, #36]	@ 0x24
 8000524:	69bb      	ldr	r3, [r7, #24]
 8000526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000528:	429a      	cmp	r2, r3
 800052a:	d3e4      	bcc.n	80004f6 <fsm_update+0x30>
        }
    }

    // Check if the state has changed
    if (fsm->currentState != oldState) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	6a3a      	ldr	r2, [r7, #32]
 8000532:	429a      	cmp	r2, r3
 8000534:	d015      	beq.n	8000562 <fsm_update+0x9c>
        FSMState newState = fsm->states[fsm->currentState];
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6819      	ldr	r1, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	4613      	mov	r3, r2
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	4413      	add	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	18ca      	adds	r2, r1, r3
 8000548:	f107 0308 	add.w	r3, r7, #8
 800054c:	ca07      	ldmia	r2, {r0, r1, r2}
 800054e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        if (newState.action) {
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d004      	beq.n	8000562 <fsm_update+0x9c>
            newState.action(fsm->context);  // Execute the action on state entry
 8000558:	693b      	ldr	r3, [r7, #16]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	6892      	ldr	r2, [r2, #8]
 800055e:	4610      	mov	r0, r2
 8000560:	4798      	blx	r3
        }
    }
}
 8000562:	bf00      	nop
 8000564:	3728      	adds	r7, #40	@ 0x28
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fb50 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f80c 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f846 	bl	8000608 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  semaforo_peatonal_init(&semaforo);
 800057c:	4803      	ldr	r0, [pc, #12]	@ (800058c <main+0x20>)
 800057e:	f000 f973 	bl	8000868 <semaforo_peatonal_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { semaforo_peatonal_update(&semaforo);
 8000582:	4802      	ldr	r0, [pc, #8]	@ (800058c <main+0x20>)
 8000584:	f000 f9aa 	bl	80008dc <semaforo_peatonal_update>
 8000588:	e7fb      	b.n	8000582 <main+0x16>
 800058a:	bf00      	nop
 800058c:	20000198 	.word	0x20000198

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b090      	sub	sp, #64	@ 0x40
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2228      	movs	r2, #40	@ 0x28
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fb27 	bl	8001bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	2301      	movs	r3, #1
 80005b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2310      	movs	r3, #16
 80005bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005be:	2300      	movs	r3, #0
 80005c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fe1e 	bl	8001208 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005d2:	f000 f887 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 f88c 	bl	800170c <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005fa:	f000 f873 	bl	80006e4 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3740      	adds	r7, #64	@ 0x40
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061c:	4b2e      	ldr	r3, [pc, #184]	@ (80006d8 <MX_GPIO_Init+0xd0>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a2d      	ldr	r2, [pc, #180]	@ (80006d8 <MX_GPIO_Init+0xd0>)
 8000622:	f043 0310 	orr.w	r3, r3, #16
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b2b      	ldr	r3, [pc, #172]	@ (80006d8 <MX_GPIO_Init+0xd0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0310 	and.w	r3, r3, #16
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <MX_GPIO_Init+0xd0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <MX_GPIO_Init+0xd0>)
 800063a:	f043 0308 	orr.w	r3, r3, #8
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <MX_GPIO_Init+0xd0>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0308 	and.w	r3, r3, #8
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <MX_GPIO_Init+0xd0>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <MX_GPIO_Init+0xd0>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <MX_GPIO_Init+0xd0>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800066a:	481c      	ldr	r0, [pc, #112]	@ (80006dc <MX_GPIO_Init+0xd4>)
 800066c:	f000 fdb3 	bl	80011d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000676:	481a      	ldr	r0, [pc, #104]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 8000678:	f000 fdad 	bl	80011d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800067c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2302      	movs	r3, #2
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	4619      	mov	r1, r3
 8000694:	4811      	ldr	r0, [pc, #68]	@ (80006dc <MX_GPIO_Init+0xd4>)
 8000696:	f000 fc03 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800069a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 80006b4:	f000 fbf4 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006b8:	2320      	movs	r3, #32
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_GPIO_Init+0xd8>)
 80006cc:	f000 fbe8 	bl	8000ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40011000 	.word	0x40011000
 80006e0:	40010c00 	.word	0x40010c00

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <Error_Handler+0x8>

080006f0 <button_pressed>:
// Variables globales para el botón con antirrebote y el detector de bordes
DebouncedSwitch button_switch;
EdgeDetector edge_detector;

// Función de condición para transiciones
static int button_pressed(void *context) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    // Asegúrate de que solo detectas el borde de subida del botón
    return get_edge_detector_state(&edge_detector) == RISING_EDGE;
 80006f8:	4806      	ldr	r0, [pc, #24]	@ (8000714 <button_pressed+0x24>)
 80006fa:	f7ff fec3 	bl	8000484 <get_edge_detector_state>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b02      	cmp	r3, #2
 8000702:	bf0c      	ite	eq
 8000704:	2301      	moveq	r3, #1
 8000706:	2300      	movne	r3, #0
 8000708:	b2db      	uxtb	r3, r3
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000200 	.word	0x20000200

08000718 <timer_expired>:


static int timer_expired(void *context) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    SemaforoPeatonal *semaforo = (SemaforoPeatonal *)context;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60fb      	str	r3, [r7, #12]
    return timer_has_expired(&semaforo->timer);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	330c      	adds	r3, #12
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fa2b 	bl	8000b84 <timer_has_expired>
 800072e:	4603      	mov	r3, r0
}
 8000730:	4618      	mov	r0, r3
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <on_state_verde>:

// Funciones de acción para cada estado
void on_state_verde(void *context) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    SemaforoPeatonal *semaforo = (SemaforoPeatonal *)context;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);  // LED verde encendido
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800074a:	480c      	ldr	r0, [pc, #48]	@ (800077c <on_state_verde+0x44>)
 800074c:	f000 fd43 	bl	80011d6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);        // LED rojo apagado
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <on_state_verde+0x48>)
 8000758:	f000 fd3d 	bl	80011d6 <HAL_GPIO_WritePin>
    set_blink_period(&semaforo->green_blink, 0);                       // Detener parpadeo del verde
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3314      	adds	r3, #20
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fd5c 	bl	8000220 <set_blink_period>
    set_blink_period(&semaforo->red_blink, 0);                         // Detener parpadeo del rojo
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3330      	adds	r3, #48	@ 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fd56 	bl	8000220 <set_blink_period>
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40010c00 	.word	0x40010c00
 8000780:	40011000 	.word	0x40011000

08000784 <on_state_verde_parpadeo>:



void on_state_verde_parpadeo(void *context) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    SemaforoPeatonal *semaforo = (SemaforoPeatonal *)context;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	60fb      	str	r3, [r7, #12]
    set_blink_period(&semaforo->green_blink, 200);                     // Parpadeo del LED verde a 5 Hz
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3314      	adds	r3, #20
 8000794:	21c8      	movs	r1, #200	@ 0xc8
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd42 	bl	8000220 <set_blink_period>
    HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);        // Asegurarse de que el LED rojo esté apagado
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a2:	480a      	ldr	r0, [pc, #40]	@ (80007cc <on_state_verde_parpadeo+0x48>)
 80007a4:	f000 fd17 	bl	80011d6 <HAL_GPIO_WritePin>
    set_blink_period(&semaforo->red_blink, 0);                         // Asegurarse de detener el parpadeo del LED rojo
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3330      	adds	r3, #48	@ 0x30
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fd36 	bl	8000220 <set_blink_period>
    timer_update_duration(&semaforo->timer, 1000);                     // Temporizador de 1 segundo
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	330c      	adds	r3, #12
 80007b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f9f6 	bl	8000bae <timer_update_duration>
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40011000 	.word	0x40011000

080007d0 <on_state_rojo>:

void on_state_rojo(void *context) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    SemaforoPeatonal *semaforo = (SemaforoPeatonal *)context;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);    // LED verde apagado
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007e2:	480c      	ldr	r0, [pc, #48]	@ (8000814 <on_state_rojo+0x44>)
 80007e4:	f000 fcf7 	bl	80011d6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);      // LED rojo encendido
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ee:	480a      	ldr	r0, [pc, #40]	@ (8000818 <on_state_rojo+0x48>)
 80007f0:	f000 fcf1 	bl	80011d6 <HAL_GPIO_WritePin>
    set_blink_period(&semaforo->green_blink, 0);                       // Detener parpadeo del verde
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3314      	adds	r3, #20
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fd10 	bl	8000220 <set_blink_period>
    set_blink_period(&semaforo->red_blink, 0);                         // Detener parpadeo del rojo
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3330      	adds	r3, #48	@ 0x30
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fd0a 	bl	8000220 <set_blink_period>
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40010c00 	.word	0x40010c00
 8000818:	40011000 	.word	0x40011000

0800081c <on_state_rojo_parpadeo>:

void on_state_rojo_parpadeo(void *context) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
    SemaforoPeatonal *semaforo = (SemaforoPeatonal *)context;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	60fb      	str	r3, [r7, #12]
    set_blink_period(&semaforo->red_blink, 200);                       // Parpadeo del LED rojo a 5 Hz
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3330      	adds	r3, #48	@ 0x30
 800082c:	21c8      	movs	r1, #200	@ 0xc8
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff fcf6 	bl	8000220 <set_blink_period>
    HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);    // Asegurarse de que el LED verde esté apagado
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800083a:	480a      	ldr	r0, [pc, #40]	@ (8000864 <on_state_rojo_parpadeo+0x48>)
 800083c:	f000 fccb 	bl	80011d6 <HAL_GPIO_WritePin>
    set_blink_period(&semaforo->green_blink, 0);                       // Asegurarse de detener el parpadeo del LED verde
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3314      	adds	r3, #20
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fcea 	bl	8000220 <set_blink_period>
    timer_update_duration(&semaforo->timer, 1000);                     // Temporizador de 1 segundo
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	330c      	adds	r3, #12
 8000850:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f9aa 	bl	8000bae <timer_update_duration>
}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010c00 	.word	0x40010c00

08000868 <semaforo_peatonal_init>:
    {rojoTransitions, 1, on_state_rojo},
    {rojoParpadeoTransitions, 1, on_state_rojo_parpadeo}
};

// Inicialización de la FSM del semáforo peatonal
void semaforo_peatonal_init(SemaforoPeatonal *semaforo) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    fsm_init(&semaforo->fsm, semaforoStates, VERDE, semaforo);  // Comienza en el estado VERDE
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	4914      	ldr	r1, [pc, #80]	@ (80008c8 <semaforo_peatonal_init+0x60>)
 8000878:	f7ff fe10 	bl	800049c <fsm_init>

    // Inicializar los controles de parpadeo para cada LED
    blink_control_init(&semaforo->green_blink, GREEN_LED_PORT, GREEN_LED_PIN, 0);  // Parpadeo inicial apagado
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f103 0014 	add.w	r0, r3, #20
 8000882:	2300      	movs	r3, #0
 8000884:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000888:	4910      	ldr	r1, [pc, #64]	@ (80008cc <semaforo_peatonal_init+0x64>)
 800088a:	f7ff fc9d 	bl	80001c8 <blink_control_init>
    blink_control_init(&semaforo->red_blink, RED_LED_PORT, RED_LED_PIN, 0);        // Parpadeo inicial apagado
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8000894:	2300      	movs	r3, #0
 8000896:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800089a:	490d      	ldr	r1, [pc, #52]	@ (80008d0 <semaforo_peatonal_init+0x68>)
 800089c:	f7ff fc94 	bl	80001c8 <blink_control_init>

    // Inicializar el temporizador
    timer_start(&semaforo->timer, 0);  // Temporizador inicializado en 0
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	330c      	adds	r3, #12
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f94e 	bl	8000b48 <timer_start>

    // Inicializar el botón con antirrebote y el detector de bordes
    debounced_switch_init(&button_switch, BUTTON_PORT, BUTTON_PIN);
 80008ac:	2220      	movs	r2, #32
 80008ae:	4907      	ldr	r1, [pc, #28]	@ (80008cc <semaforo_peatonal_init+0x64>)
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <semaforo_peatonal_init+0x6c>)
 80008b2:	f7ff fd3d 	bl	8000330 <debounced_switch_init>
    edge_detector_init(&edge_detector, &button_switch);
 80008b6:	4907      	ldr	r1, [pc, #28]	@ (80008d4 <semaforo_peatonal_init+0x6c>)
 80008b8:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <semaforo_peatonal_init+0x70>)
 80008ba:	f7ff fdc3 	bl	8000444 <edge_detector_init>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000e4 	.word	0x200000e4
 80008cc:	40010c00 	.word	0x40010c00
 80008d0:	40011000 	.word	0x40011000
 80008d4:	200001e4 	.word	0x200001e4
 80008d8:	20000200 	.word	0x20000200

080008dc <semaforo_peatonal_update>:

// Actualización de la FSM y controles de parpadeo
void semaforo_peatonal_update(SemaforoPeatonal *semaforo) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    debounced_switch_update(&button_switch);
 80008e4:	4813      	ldr	r0, [pc, #76]	@ (8000934 <semaforo_peatonal_update+0x58>)
 80008e6:	f7ff fd43 	bl	8000370 <debounced_switch_update>
    edge_detector_update(&edge_detector);
 80008ea:	4813      	ldr	r0, [pc, #76]	@ (8000938 <semaforo_peatonal_update+0x5c>)
 80008ec:	f7ff fdbe 	bl	800046c <edge_detector_update>
    fsm_update(&semaforo->fsm);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fde7 	bl	80004c6 <fsm_update>

    // Imprime el estado actual de la FSM para depuración
    printf("Estado actual de la FSM: %ld\n", semaforo->fsm.currentState);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	4619      	mov	r1, r3
 80008fe:	480f      	ldr	r0, [pc, #60]	@ (800093c <semaforo_peatonal_update+0x60>)
 8000900:	f001 f922 	bl	8001b48 <iprintf>

    if (semaforo->fsm.currentState == VERDE_PARPADEO) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d105      	bne.n	8000918 <semaforo_peatonal_update+0x3c>
        blink_control_update(&semaforo->green_blink);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3314      	adds	r3, #20
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fc79 	bl	8000208 <blink_control_update>
    } else if (semaforo->fsm.currentState == ROJO_PARPADEO) {
        blink_control_update(&semaforo->red_blink);
    }
}
 8000916:	e008      	b.n	800092a <semaforo_peatonal_update+0x4e>
    } else if (semaforo->fsm.currentState == ROJO_PARPADEO) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d104      	bne.n	800092a <semaforo_peatonal_update+0x4e>
        blink_control_update(&semaforo->red_blink);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3330      	adds	r3, #48	@ 0x30
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc6f 	bl	8000208 <blink_control_update>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200001e4 	.word	0x200001e4
 8000938:	20000200 	.word	0x20000200
 800093c:	08002850 	.word	0x08002850

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a14      	ldr	r2, [pc, #80]	@ (800099c <HAL_MspInit+0x5c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b12      	ldr	r3, [pc, #72]	@ (800099c <HAL_MspInit+0x5c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a0e      	ldr	r2, [pc, #56]	@ (800099c <HAL_MspInit+0x5c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <HAL_MspInit+0x5c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_MspInit+0x60>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_MspInit+0x60>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010000 	.word	0x40010000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <NMI_Handler+0x4>

080009ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <MemManage_Handler+0x4>

080009bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <UsageFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f954 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e00a      	b.n	8000a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a0e:	f3af 8000 	nop.w
 8000a12:	4601      	mov	r1, r0
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	60ba      	str	r2, [r7, #8]
 8000a1a:	b2ca      	uxtb	r2, r1
 8000a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf0      	blt.n	8000a0e <_read+0x12>
  }

  return len;
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	e009      	b.n	8000a5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf1      	blt.n	8000a48 <_write+0x12>
  }
  return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_close>:

int _close(int file)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a94:	605a      	str	r2, [r3, #4]
  return 0;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <_isatty>:

int _isatty(int file)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b085      	sub	sp, #20
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
	...

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	@ (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f001 f8c6 	bl	8001c90 <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20005000 	.word	0x20005000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	20000210 	.word	0x20000210
 8000b38:	20000368 	.word	0x20000368

08000b3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <timer_start>:
#include "timer.h"

/**
 * @brief Starts a timer for the specified duration in milliseconds.
 */
void timer_start(Timer *timer, uint32_t duration_ms) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
    timer->start_tick = HAL_GetTick();    // Store the current tick
 8000b52:	f000 f8b7 	bl	8000cc4 <HAL_GetTick>
 8000b56:	4602      	mov	r2, r0
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	601a      	str	r2, [r3, #0]
    timer->duration_ms = duration_ms; // Set the timeout duration
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	605a      	str	r2, [r3, #4]
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <timer_restart>:

/**
 * @brief Restarts a timer.
 */
void timer_restart(Timer *timer) {
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
    timer->start_tick = HAL_GetTick();
 8000b72:	f000 f8a7 	bl	8000cc4 <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	601a      	str	r2, [r3, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <timer_has_expired>:
/**
 * @brief Checks if the timer has expired.
 *
 * @return 1 if the timer has expired, 0 if not.
 */
int timer_has_expired(Timer *timer) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    return (HAL_GetTick() - timer->start_tick >= timer->duration_ms);
 8000b8c:	f000 f89a 	bl	8000cc4 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	1ad2      	subs	r2, r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	bf2c      	ite	cs
 8000ba0:	2301      	movcs	r3, #1
 8000ba2:	2300      	movcc	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <timer_update_duration>:

/**
 * @brief Updates the timer duration without resetting the start tick.
 */
void timer_update_duration(Timer *timer, uint32_t new_duration_ms) {
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
    timer->duration_ms = new_duration_ms;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc8:	f7ff ffb8 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480b      	ldr	r0, [pc, #44]	@ (8000bfc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bce:	490c      	ldr	r1, [pc, #48]	@ (8000c00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a09      	ldr	r2, [pc, #36]	@ (8000c08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000be4:	4c09      	ldr	r4, [pc, #36]	@ (8000c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f001 f853 	bl	8001c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf6:	f7ff fcb9 	bl	800056c <main>
  bx lr
 8000bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000c04:	080028d0 	.word	0x080028d0
  ldr r2, =_sbss
 8000c08:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000c0c:	20000364 	.word	0x20000364

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <HAL_Init+0x28>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	@ (8000c3c <HAL_Init+0x28>)
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 f907 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2a:	200f      	movs	r0, #15
 8000c2c:	f000 f808 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c30:	f7ff fe86 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40022000 	.word	0x40022000

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_InitTick+0x54>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_InitTick+0x58>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f911 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00e      	b.n	8000c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d80a      	bhi.n	8000c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f000 f8e7 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c80:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <HAL_InitTick+0x5c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e000      	b.n	8000c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000114 	.word	0x20000114
 8000c98:	2000011c 	.word	0x2000011c
 8000c9c:	20000118 	.word	0x20000118

08000ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_IncTick+0x1c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <HAL_IncTick+0x20>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a03      	ldr	r2, [pc, #12]	@ (8000cc0 <HAL_IncTick+0x20>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	2000011c 	.word	0x2000011c
 8000cc0:	20000214 	.word	0x20000214

08000cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b02      	ldr	r3, [pc, #8]	@ (8000cd4 <HAL_GetTick+0x10>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	20000214 	.word	0x20000214

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	@ (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	@ 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f7ff ff90 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff49 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff5e 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff90 	bl	8000d90 <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5f 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffb0 	bl	8000df4 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b08b      	sub	sp, #44	@ 0x2c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e169      	b.n	8001188 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8158 	bne.w	8001182 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4a9a      	ldr	r2, [pc, #616]	@ (8001140 <HAL_GPIO_Init+0x2a0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d05e      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000edc:	4a98      	ldr	r2, [pc, #608]	@ (8001140 <HAL_GPIO_Init+0x2a0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d875      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000ee2:	4a98      	ldr	r2, [pc, #608]	@ (8001144 <HAL_GPIO_Init+0x2a4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d058      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000ee8:	4a96      	ldr	r2, [pc, #600]	@ (8001144 <HAL_GPIO_Init+0x2a4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d86f      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000eee:	4a96      	ldr	r2, [pc, #600]	@ (8001148 <HAL_GPIO_Init+0x2a8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d052      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000ef4:	4a94      	ldr	r2, [pc, #592]	@ (8001148 <HAL_GPIO_Init+0x2a8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d869      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000efa:	4a94      	ldr	r2, [pc, #592]	@ (800114c <HAL_GPIO_Init+0x2ac>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d04c      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000f00:	4a92      	ldr	r2, [pc, #584]	@ (800114c <HAL_GPIO_Init+0x2ac>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d863      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f06:	4a92      	ldr	r2, [pc, #584]	@ (8001150 <HAL_GPIO_Init+0x2b0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d046      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000f0c:	4a90      	ldr	r2, [pc, #576]	@ (8001150 <HAL_GPIO_Init+0x2b0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d85d      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d82a      	bhi.n	8000f6c <HAL_GPIO_Init+0xcc>
 8000f16:	2b12      	cmp	r3, #18
 8000f18:	d859      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f20 <HAL_GPIO_Init+0x80>)
 8000f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f20:	08000f9b 	.word	0x08000f9b
 8000f24:	08000f75 	.word	0x08000f75
 8000f28:	08000f87 	.word	0x08000f87
 8000f2c:	08000fc9 	.word	0x08000fc9
 8000f30:	08000fcf 	.word	0x08000fcf
 8000f34:	08000fcf 	.word	0x08000fcf
 8000f38:	08000fcf 	.word	0x08000fcf
 8000f3c:	08000fcf 	.word	0x08000fcf
 8000f40:	08000fcf 	.word	0x08000fcf
 8000f44:	08000fcf 	.word	0x08000fcf
 8000f48:	08000fcf 	.word	0x08000fcf
 8000f4c:	08000fcf 	.word	0x08000fcf
 8000f50:	08000fcf 	.word	0x08000fcf
 8000f54:	08000fcf 	.word	0x08000fcf
 8000f58:	08000fcf 	.word	0x08000fcf
 8000f5c:	08000fcf 	.word	0x08000fcf
 8000f60:	08000fcf 	.word	0x08000fcf
 8000f64:	08000f7d 	.word	0x08000f7d
 8000f68:	08000f91 	.word	0x08000f91
 8000f6c:	4a79      	ldr	r2, [pc, #484]	@ (8001154 <HAL_GPIO_Init+0x2b4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f72:	e02c      	b.n	8000fce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	623b      	str	r3, [r7, #32]
          break;
 8000f7a:	e029      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	3304      	adds	r3, #4
 8000f82:	623b      	str	r3, [r7, #32]
          break;
 8000f84:	e024      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	623b      	str	r3, [r7, #32]
          break;
 8000f8e:	e01f      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	330c      	adds	r3, #12
 8000f96:	623b      	str	r3, [r7, #32]
          break;
 8000f98:	e01a      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	623b      	str	r3, [r7, #32]
          break;
 8000fa6:	e013      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d105      	bne.n	8000fbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	611a      	str	r2, [r3, #16]
          break;
 8000fba:	e009      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	615a      	str	r2, [r3, #20]
          break;
 8000fc6:	e003      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
          break;
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          break;
 8000fce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2bff      	cmp	r3, #255	@ 0xff
 8000fd4:	d801      	bhi.n	8000fda <HAL_GPIO_Init+0x13a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	e001      	b.n	8000fde <HAL_GPIO_Init+0x13e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2bff      	cmp	r3, #255	@ 0xff
 8000fe4:	d802      	bhi.n	8000fec <HAL_GPIO_Init+0x14c>
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x152>
 8000fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fee:	3b08      	subs	r3, #8
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	210f      	movs	r1, #15
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	401a      	ands	r2, r3
 8001004:	6a39      	ldr	r1, [r7, #32]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	431a      	orrs	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 80b1 	beq.w	8001182 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001020:	4b4d      	ldr	r3, [pc, #308]	@ (8001158 <HAL_GPIO_Init+0x2b8>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a4c      	ldr	r2, [pc, #304]	@ (8001158 <HAL_GPIO_Init+0x2b8>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b4a      	ldr	r3, [pc, #296]	@ (8001158 <HAL_GPIO_Init+0x2b8>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001038:	4a48      	ldr	r2, [pc, #288]	@ (800115c <HAL_GPIO_Init+0x2bc>)
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001044:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a40      	ldr	r2, [pc, #256]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d013      	beq.n	800108c <HAL_GPIO_Init+0x1ec>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a3f      	ldr	r2, [pc, #252]	@ (8001164 <HAL_GPIO_Init+0x2c4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00d      	beq.n	8001088 <HAL_GPIO_Init+0x1e8>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a3e      	ldr	r2, [pc, #248]	@ (8001168 <HAL_GPIO_Init+0x2c8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x1e4>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a3d      	ldr	r2, [pc, #244]	@ (800116c <HAL_GPIO_Init+0x2cc>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_GPIO_Init+0x1e0>
 800107c:	2303      	movs	r3, #3
 800107e:	e006      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 8001080:	2304      	movs	r3, #4
 8001082:	e004      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 8001084:	2302      	movs	r3, #2
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 800108c:	2300      	movs	r3, #0
 800108e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	4093      	lsls	r3, r2
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800109e:	492f      	ldr	r1, [pc, #188]	@ (800115c <HAL_GPIO_Init+0x2bc>)
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	492c      	ldr	r1, [pc, #176]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	608b      	str	r3, [r1, #8]
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4928      	ldr	r1, [pc, #160]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010e0:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	4922      	ldr	r1, [pc, #136]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	60cb      	str	r3, [r1, #12]
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	491e      	ldr	r1, [pc, #120]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001108:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4918      	ldr	r1, [pc, #96]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	43db      	mvns	r3, r3
 800111e:	4914      	ldr	r1, [pc, #80]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001120:	4013      	ands	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d021      	beq.n	8001174 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	490e      	ldr	r1, [pc, #56]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	600b      	str	r3, [r1, #0]
 800113c:	e021      	b.n	8001182 <HAL_GPIO_Init+0x2e2>
 800113e:	bf00      	nop
 8001140:	10320000 	.word	0x10320000
 8001144:	10310000 	.word	0x10310000
 8001148:	10220000 	.word	0x10220000
 800114c:	10210000 	.word	0x10210000
 8001150:	10120000 	.word	0x10120000
 8001154:	10110000 	.word	0x10110000
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000
 8001160:	40010800 	.word	0x40010800
 8001164:	40010c00 	.word	0x40010c00
 8001168:	40011000 	.word	0x40011000
 800116c:	40011400 	.word	0x40011400
 8001170:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	43db      	mvns	r3, r3
 800117c:	4909      	ldr	r1, [pc, #36]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 800117e:	4013      	ands	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001184:	3301      	adds	r3, #1
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	fa22 f303 	lsr.w	r3, r2, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	f47f ae8e 	bne.w	8000eb4 <HAL_GPIO_Init+0x14>
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	372c      	adds	r7, #44	@ 0x2c
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e001      	b.n	80011ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	807b      	strh	r3, [r7, #2]
 80011e2:	4613      	mov	r3, r2
 80011e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e6:	787b      	ldrb	r3, [r7, #1]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ec:	887a      	ldrh	r2, [r7, #2]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011f2:	e003      	b.n	80011fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	041a      	lsls	r2, r3, #16
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	611a      	str	r2, [r3, #16]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
	...

08001208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e272      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8087 	beq.w	8001336 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001228:	4b92      	ldr	r3, [pc, #584]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b04      	cmp	r3, #4
 8001232:	d00c      	beq.n	800124e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001234:	4b8f      	ldr	r3, [pc, #572]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d112      	bne.n	8001266 <HAL_RCC_OscConfig+0x5e>
 8001240:	4b8c      	ldr	r3, [pc, #560]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800124c:	d10b      	bne.n	8001266 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124e:	4b89      	ldr	r3, [pc, #548]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d06c      	beq.n	8001334 <HAL_RCC_OscConfig+0x12c>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d168      	bne.n	8001334 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e24c      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x76>
 8001270:	4b80      	ldr	r3, [pc, #512]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a7f      	ldr	r2, [pc, #508]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e02e      	b.n	80012dc <HAL_RCC_OscConfig+0xd4>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x98>
 8001286:	4b7b      	ldr	r3, [pc, #492]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a7a      	ldr	r2, [pc, #488]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 800128c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b78      	ldr	r3, [pc, #480]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a77      	ldr	r2, [pc, #476]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001298:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e01d      	b.n	80012dc <HAL_RCC_OscConfig+0xd4>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0xbc>
 80012aa:	4b72      	ldr	r3, [pc, #456]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a71      	ldr	r2, [pc, #452]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_RCC_OscConfig+0xd4>
 80012c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b68      	ldr	r3, [pc, #416]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a67      	ldr	r2, [pc, #412]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fcee 	bl	8000cc4 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fcea 	bl	8000cc4 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	@ 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e200      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0xe4>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcda 	bl	8000cc4 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcd6 	bl	8000cc4 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	@ 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e1ec      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	4b53      	ldr	r3, [pc, #332]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x10c>
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d063      	beq.n	800140a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001342:	4b4c      	ldr	r3, [pc, #304]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800134e:	4b49      	ldr	r3, [pc, #292]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b08      	cmp	r3, #8
 8001358:	d11c      	bne.n	8001394 <HAL_RCC_OscConfig+0x18c>
 800135a:	4b46      	ldr	r3, [pc, #280]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d116      	bne.n	8001394 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	4b43      	ldr	r3, [pc, #268]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x176>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e1c0      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	4b3d      	ldr	r3, [pc, #244]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4939      	ldr	r1, [pc, #228]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	e03a      	b.n	800140a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d020      	beq.n	80013de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139c:	4b36      	ldr	r3, [pc, #216]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a2:	f7ff fc8f 	bl	8000cc4 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fc8b 	bl	8000cc4 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1a1      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4927      	ldr	r1, [pc, #156]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
 80013dc:	e015      	b.n	800140a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013de:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <HAL_RCC_OscConfig+0x270>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fc6e 	bl	8000cc4 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff fc6a 	bl	8000cc4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e180      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d03a      	beq.n	800148c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d019      	beq.n	8001452 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <HAL_RCC_OscConfig+0x274>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001424:	f7ff fc4e 	bl	8000cc4 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff fc4a 	bl	8000cc4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e160      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800144a:	2001      	movs	r0, #1
 800144c:	f000 fa9c 	bl	8001988 <RCC_Delay>
 8001450:	e01c      	b.n	800148c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_RCC_OscConfig+0x274>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff fc34 	bl	8000cc4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145e:	e00f      	b.n	8001480 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff fc30 	bl	8000cc4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d908      	bls.n	8001480 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e146      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	42420000 	.word	0x42420000
 800147c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b92      	ldr	r3, [pc, #584]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e9      	bne.n	8001460 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a6 	beq.w	80015e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b8b      	ldr	r3, [pc, #556]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10d      	bne.n	80014c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b88      	ldr	r3, [pc, #544]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a87      	ldr	r2, [pc, #540]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b85      	ldr	r3, [pc, #532]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	4b82      	ldr	r3, [pc, #520]	@ (80016d0 <HAL_RCC_OscConfig+0x4c8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d2:	4b7f      	ldr	r3, [pc, #508]	@ (80016d0 <HAL_RCC_OscConfig+0x4c8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a7e      	ldr	r2, [pc, #504]	@ (80016d0 <HAL_RCC_OscConfig+0x4c8>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fbf1 	bl	8000cc4 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff fbed 	bl	8000cc4 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b64      	cmp	r3, #100	@ 0x64
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e103      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	4b75      	ldr	r3, [pc, #468]	@ (80016d0 <HAL_RCC_OscConfig+0x4c8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x312>
 800150c:	4b6f      	ldr	r3, [pc, #444]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4a6e      	ldr	r2, [pc, #440]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6213      	str	r3, [r2, #32]
 8001518:	e02d      	b.n	8001576 <HAL_RCC_OscConfig+0x36e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x334>
 8001522:	4b6a      	ldr	r3, [pc, #424]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4a69      	ldr	r2, [pc, #420]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6213      	str	r3, [r2, #32]
 800152e:	4b67      	ldr	r3, [pc, #412]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a66      	ldr	r2, [pc, #408]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6213      	str	r3, [r2, #32]
 800153a:	e01c      	b.n	8001576 <HAL_RCC_OscConfig+0x36e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d10c      	bne.n	800155e <HAL_RCC_OscConfig+0x356>
 8001544:	4b61      	ldr	r3, [pc, #388]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a60      	ldr	r2, [pc, #384]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	4b5e      	ldr	r3, [pc, #376]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a5d      	ldr	r2, [pc, #372]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	e00b      	b.n	8001576 <HAL_RCC_OscConfig+0x36e>
 800155e:	4b5b      	ldr	r3, [pc, #364]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a5a      	ldr	r2, [pc, #360]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6213      	str	r3, [r2, #32]
 800156a:	4b58      	ldr	r3, [pc, #352]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a57      	ldr	r2, [pc, #348]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d015      	beq.n	80015aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff fba1 	bl	8000cc4 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fb9d 	bl	8000cc4 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0b1      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159c:	4b4b      	ldr	r3, [pc, #300]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ee      	beq.n	8001586 <HAL_RCC_OscConfig+0x37e>
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fb8b 	bl	8000cc4 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff fb87 	bl	8000cc4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e09b      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c8:	4b40      	ldr	r3, [pc, #256]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1ee      	bne.n	80015b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d105      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015da:	4b3c      	ldr	r3, [pc, #240]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a3b      	ldr	r2, [pc, #236]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8087 	beq.w	80016fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f0:	4b36      	ldr	r3, [pc, #216]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d061      	beq.n	80016c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d146      	bne.n	8001692 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001604:	4b33      	ldr	r3, [pc, #204]	@ (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fb5b 	bl	8000cc4 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff fb57 	bl	8000cc4 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e06d      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001624:	4b29      	ldr	r3, [pc, #164]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f0      	bne.n	8001612 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001638:	d108      	bne.n	800164c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800163a:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	4921      	ldr	r1, [pc, #132]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800164c:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a19      	ldr	r1, [r3, #32]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	430b      	orrs	r3, r1
 800165e:	491b      	ldr	r1, [pc, #108]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fb2b 	bl	8000cc4 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001672:	f7ff fb27 	bl	8000cc4 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e03d      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x46a>
 8001690:	e035      	b.n	80016fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fb14 	bl	8000cc4 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff fb10 	bl	8000cc4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e026      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x498>
 80016be:	e01e      	b.n	80016fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d107      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e019      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40007000 	.word	0x40007000
 80016d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_RCC_OscConfig+0x500>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000

0800170c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0d0      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001720:	4b6a      	ldr	r3, [pc, #424]	@ (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d910      	bls.n	8001750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b67      	ldr	r3, [pc, #412]	@ (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 0207 	bic.w	r2, r3, #7
 8001736:	4965      	ldr	r1, [pc, #404]	@ (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b63      	ldr	r3, [pc, #396]	@ (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0b8      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001768:	4b59      	ldr	r3, [pc, #356]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a58      	ldr	r2, [pc, #352]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001772:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001780:	4b53      	ldr	r3, [pc, #332]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4a52      	ldr	r2, [pc, #328]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800178a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178c:	4b50      	ldr	r3, [pc, #320]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	494d      	ldr	r1, [pc, #308]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d040      	beq.n	800182c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b47      	ldr	r3, [pc, #284]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d115      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e07f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b41      	ldr	r3, [pc, #260]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e073      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b3d      	ldr	r3, [pc, #244]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e06b      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ea:	4b39      	ldr	r3, [pc, #228]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f023 0203 	bic.w	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4936      	ldr	r1, [pc, #216]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017fc:	f7ff fa62 	bl	8000cc4 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	e00a      	b.n	800181a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001804:	f7ff fa5e 	bl	8000cc4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e053      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	4b2d      	ldr	r3, [pc, #180]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 020c 	and.w	r2, r3, #12
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	429a      	cmp	r2, r3
 800182a:	d1eb      	bne.n	8001804 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800182c:	4b27      	ldr	r3, [pc, #156]	@ (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d210      	bcs.n	800185c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 0207 	bic.w	r2, r3, #7
 8001842:	4922      	ldr	r1, [pc, #136]	@ (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e032      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001868:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4916      	ldr	r1, [pc, #88]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	490e      	ldr	r1, [pc, #56]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189a:	f000 f821 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	490a      	ldr	r1, [pc, #40]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80018ac:	5ccb      	ldrb	r3, [r1, r3]
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	4a09      	ldr	r2, [pc, #36]	@ (80018d8 <HAL_RCC_ClockConfig+0x1cc>)
 80018b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_RCC_ClockConfig+0x1d0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f9c0 	bl	8000c40 <HAL_InitTick>

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000
 80018d0:	40021000 	.word	0x40021000
 80018d4:	08002870 	.word	0x08002870
 80018d8:	20000114 	.word	0x20000114
 80018dc:	20000118 	.word	0x20000118

080018e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x94>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b04      	cmp	r3, #4
 8001908:	d002      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x30>
 800190a:	2b08      	cmp	r3, #8
 800190c:	d003      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x36>
 800190e:	e027      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <HAL_RCC_GetSysClockFreq+0x98>)
 8001912:	613b      	str	r3, [r7, #16]
      break;
 8001914:	e027      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	0c9b      	lsrs	r3, r3, #18
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	4a17      	ldr	r2, [pc, #92]	@ (800197c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d010      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x94>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	0c5b      	lsrs	r3, r3, #17
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	4a11      	ldr	r2, [pc, #68]	@ (8001980 <HAL_RCC_GetSysClockFreq+0xa0>)
 800193a:	5cd3      	ldrb	r3, [r2, r3]
 800193c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a0d      	ldr	r2, [pc, #52]	@ (8001978 <HAL_RCC_GetSysClockFreq+0x98>)
 8001942:	fb03 f202 	mul.w	r2, r3, r2
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e004      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a0c      	ldr	r2, [pc, #48]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	613b      	str	r3, [r7, #16]
      break;
 800195e:	e002      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_RCC_GetSysClockFreq+0x98>)
 8001962:	613b      	str	r3, [r7, #16]
      break;
 8001964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001966:	693b      	ldr	r3, [r7, #16]
}
 8001968:	4618      	mov	r0, r3
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	007a1200 	.word	0x007a1200
 800197c:	08002880 	.word	0x08002880
 8001980:	08002890 	.word	0x08002890
 8001984:	003d0900 	.word	0x003d0900

08001988 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001990:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <RCC_Delay+0x34>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <RCC_Delay+0x38>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0a5b      	lsrs	r3, r3, #9
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019a4:	bf00      	nop
  }
  while (Delay --);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1e5a      	subs	r2, r3, #1
 80019aa:	60fa      	str	r2, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f9      	bne.n	80019a4 <RCC_Delay+0x1c>
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	20000114 	.word	0x20000114
 80019c0:	10624dd3 	.word	0x10624dd3

080019c4 <std>:
 80019c4:	2300      	movs	r3, #0
 80019c6:	b510      	push	{r4, lr}
 80019c8:	4604      	mov	r4, r0
 80019ca:	e9c0 3300 	strd	r3, r3, [r0]
 80019ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019d2:	6083      	str	r3, [r0, #8]
 80019d4:	8181      	strh	r1, [r0, #12]
 80019d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80019d8:	81c2      	strh	r2, [r0, #14]
 80019da:	6183      	str	r3, [r0, #24]
 80019dc:	4619      	mov	r1, r3
 80019de:	2208      	movs	r2, #8
 80019e0:	305c      	adds	r0, #92	@ 0x5c
 80019e2:	f000 f906 	bl	8001bf2 <memset>
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <std+0x58>)
 80019e8:	6224      	str	r4, [r4, #32]
 80019ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <std+0x5c>)
 80019ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <std+0x60>)
 80019f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <std+0x64>)
 80019f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <std+0x68>)
 80019fa:	429c      	cmp	r4, r3
 80019fc:	d006      	beq.n	8001a0c <std+0x48>
 80019fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a02:	4294      	cmp	r4, r2
 8001a04:	d002      	beq.n	8001a0c <std+0x48>
 8001a06:	33d0      	adds	r3, #208	@ 0xd0
 8001a08:	429c      	cmp	r4, r3
 8001a0a:	d105      	bne.n	8001a18 <std+0x54>
 8001a0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a14:	f000 b966 	b.w	8001ce4 <__retarget_lock_init_recursive>
 8001a18:	bd10      	pop	{r4, pc}
 8001a1a:	bf00      	nop
 8001a1c:	08001b6d 	.word	0x08001b6d
 8001a20:	08001b8f 	.word	0x08001b8f
 8001a24:	08001bc7 	.word	0x08001bc7
 8001a28:	08001beb 	.word	0x08001beb
 8001a2c:	20000218 	.word	0x20000218

08001a30 <stdio_exit_handler>:
 8001a30:	4a02      	ldr	r2, [pc, #8]	@ (8001a3c <stdio_exit_handler+0xc>)
 8001a32:	4903      	ldr	r1, [pc, #12]	@ (8001a40 <stdio_exit_handler+0x10>)
 8001a34:	4803      	ldr	r0, [pc, #12]	@ (8001a44 <stdio_exit_handler+0x14>)
 8001a36:	f000 b869 	b.w	8001b0c <_fwalk_sglue>
 8001a3a:	bf00      	nop
 8001a3c:	20000120 	.word	0x20000120
 8001a40:	0800257d 	.word	0x0800257d
 8001a44:	20000130 	.word	0x20000130

08001a48 <cleanup_stdio>:
 8001a48:	6841      	ldr	r1, [r0, #4]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <cleanup_stdio+0x34>)
 8001a4c:	b510      	push	{r4, lr}
 8001a4e:	4299      	cmp	r1, r3
 8001a50:	4604      	mov	r4, r0
 8001a52:	d001      	beq.n	8001a58 <cleanup_stdio+0x10>
 8001a54:	f000 fd92 	bl	800257c <_fflush_r>
 8001a58:	68a1      	ldr	r1, [r4, #8]
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <cleanup_stdio+0x38>)
 8001a5c:	4299      	cmp	r1, r3
 8001a5e:	d002      	beq.n	8001a66 <cleanup_stdio+0x1e>
 8001a60:	4620      	mov	r0, r4
 8001a62:	f000 fd8b 	bl	800257c <_fflush_r>
 8001a66:	68e1      	ldr	r1, [r4, #12]
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <cleanup_stdio+0x3c>)
 8001a6a:	4299      	cmp	r1, r3
 8001a6c:	d004      	beq.n	8001a78 <cleanup_stdio+0x30>
 8001a6e:	4620      	mov	r0, r4
 8001a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a74:	f000 bd82 	b.w	800257c <_fflush_r>
 8001a78:	bd10      	pop	{r4, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000218 	.word	0x20000218
 8001a80:	20000280 	.word	0x20000280
 8001a84:	200002e8 	.word	0x200002e8

08001a88 <global_stdio_init.part.0>:
 8001a88:	b510      	push	{r4, lr}
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <global_stdio_init.part.0+0x30>)
 8001a8c:	4c0b      	ldr	r4, [pc, #44]	@ (8001abc <global_stdio_init.part.0+0x34>)
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac0 <global_stdio_init.part.0+0x38>)
 8001a90:	4620      	mov	r0, r4
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	2104      	movs	r1, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	f7ff ff94 	bl	80019c4 <std>
 8001a9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2109      	movs	r1, #9
 8001aa4:	f7ff ff8e 	bl	80019c4 <std>
 8001aa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001aac:	2202      	movs	r2, #2
 8001aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ab2:	2112      	movs	r1, #18
 8001ab4:	f7ff bf86 	b.w	80019c4 <std>
 8001ab8:	20000350 	.word	0x20000350
 8001abc:	20000218 	.word	0x20000218
 8001ac0:	08001a31 	.word	0x08001a31

08001ac4 <__sfp_lock_acquire>:
 8001ac4:	4801      	ldr	r0, [pc, #4]	@ (8001acc <__sfp_lock_acquire+0x8>)
 8001ac6:	f000 b90e 	b.w	8001ce6 <__retarget_lock_acquire_recursive>
 8001aca:	bf00      	nop
 8001acc:	20000359 	.word	0x20000359

08001ad0 <__sfp_lock_release>:
 8001ad0:	4801      	ldr	r0, [pc, #4]	@ (8001ad8 <__sfp_lock_release+0x8>)
 8001ad2:	f000 b909 	b.w	8001ce8 <__retarget_lock_release_recursive>
 8001ad6:	bf00      	nop
 8001ad8:	20000359 	.word	0x20000359

08001adc <__sinit>:
 8001adc:	b510      	push	{r4, lr}
 8001ade:	4604      	mov	r4, r0
 8001ae0:	f7ff fff0 	bl	8001ac4 <__sfp_lock_acquire>
 8001ae4:	6a23      	ldr	r3, [r4, #32]
 8001ae6:	b11b      	cbz	r3, 8001af0 <__sinit+0x14>
 8001ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aec:	f7ff bff0 	b.w	8001ad0 <__sfp_lock_release>
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <__sinit+0x28>)
 8001af2:	6223      	str	r3, [r4, #32]
 8001af4:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <__sinit+0x2c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f5      	bne.n	8001ae8 <__sinit+0xc>
 8001afc:	f7ff ffc4 	bl	8001a88 <global_stdio_init.part.0>
 8001b00:	e7f2      	b.n	8001ae8 <__sinit+0xc>
 8001b02:	bf00      	nop
 8001b04:	08001a49 	.word	0x08001a49
 8001b08:	20000350 	.word	0x20000350

08001b0c <_fwalk_sglue>:
 8001b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b10:	4607      	mov	r7, r0
 8001b12:	4688      	mov	r8, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	2600      	movs	r6, #0
 8001b18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b1c:	f1b9 0901 	subs.w	r9, r9, #1
 8001b20:	d505      	bpl.n	8001b2e <_fwalk_sglue+0x22>
 8001b22:	6824      	ldr	r4, [r4, #0]
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	d1f7      	bne.n	8001b18 <_fwalk_sglue+0xc>
 8001b28:	4630      	mov	r0, r6
 8001b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b2e:	89ab      	ldrh	r3, [r5, #12]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d907      	bls.n	8001b44 <_fwalk_sglue+0x38>
 8001b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	d003      	beq.n	8001b44 <_fwalk_sglue+0x38>
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	4638      	mov	r0, r7
 8001b40:	47c0      	blx	r8
 8001b42:	4306      	orrs	r6, r0
 8001b44:	3568      	adds	r5, #104	@ 0x68
 8001b46:	e7e9      	b.n	8001b1c <_fwalk_sglue+0x10>

08001b48 <iprintf>:
 8001b48:	b40f      	push	{r0, r1, r2, r3}
 8001b4a:	b507      	push	{r0, r1, r2, lr}
 8001b4c:	4906      	ldr	r1, [pc, #24]	@ (8001b68 <iprintf+0x20>)
 8001b4e:	ab04      	add	r3, sp, #16
 8001b50:	6808      	ldr	r0, [r1, #0]
 8001b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b56:	6881      	ldr	r1, [r0, #8]
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	f000 f9e5 	bl	8001f28 <_vfiprintf_r>
 8001b5e:	b003      	add	sp, #12
 8001b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b64:	b004      	add	sp, #16
 8001b66:	4770      	bx	lr
 8001b68:	2000012c 	.word	0x2000012c

08001b6c <__sread>:
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	460c      	mov	r4, r1
 8001b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b74:	f000 f868 	bl	8001c48 <_read_r>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	bfab      	itete	ge
 8001b7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8001b80:	181b      	addge	r3, r3, r0
 8001b82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001b86:	bfac      	ite	ge
 8001b88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001b8a:	81a3      	strhlt	r3, [r4, #12]
 8001b8c:	bd10      	pop	{r4, pc}

08001b8e <__swrite>:
 8001b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b92:	461f      	mov	r7, r3
 8001b94:	898b      	ldrh	r3, [r1, #12]
 8001b96:	4605      	mov	r5, r0
 8001b98:	05db      	lsls	r3, r3, #23
 8001b9a:	460c      	mov	r4, r1
 8001b9c:	4616      	mov	r6, r2
 8001b9e:	d505      	bpl.n	8001bac <__swrite+0x1e>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ba8:	f000 f83c 	bl	8001c24 <_lseek_r>
 8001bac:	89a3      	ldrh	r3, [r4, #12]
 8001bae:	4632      	mov	r2, r6
 8001bb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bb4:	81a3      	strh	r3, [r4, #12]
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	463b      	mov	r3, r7
 8001bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc2:	f000 b853 	b.w	8001c6c <_write_r>

08001bc6 <__sseek>:
 8001bc6:	b510      	push	{r4, lr}
 8001bc8:	460c      	mov	r4, r1
 8001bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bce:	f000 f829 	bl	8001c24 <_lseek_r>
 8001bd2:	1c43      	adds	r3, r0, #1
 8001bd4:	89a3      	ldrh	r3, [r4, #12]
 8001bd6:	bf15      	itete	ne
 8001bd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001bda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001bde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001be2:	81a3      	strheq	r3, [r4, #12]
 8001be4:	bf18      	it	ne
 8001be6:	81a3      	strhne	r3, [r4, #12]
 8001be8:	bd10      	pop	{r4, pc}

08001bea <__sclose>:
 8001bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bee:	f000 b809 	b.w	8001c04 <_close_r>

08001bf2 <memset>:
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4402      	add	r2, r0
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d100      	bne.n	8001bfc <memset+0xa>
 8001bfa:	4770      	bx	lr
 8001bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8001c00:	e7f9      	b.n	8001bf6 <memset+0x4>
	...

08001c04 <_close_r>:
 8001c04:	b538      	push	{r3, r4, r5, lr}
 8001c06:	2300      	movs	r3, #0
 8001c08:	4d05      	ldr	r5, [pc, #20]	@ (8001c20 <_close_r+0x1c>)
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	602b      	str	r3, [r5, #0]
 8001c10:	f7fe ff2d 	bl	8000a6e <_close>
 8001c14:	1c43      	adds	r3, r0, #1
 8001c16:	d102      	bne.n	8001c1e <_close_r+0x1a>
 8001c18:	682b      	ldr	r3, [r5, #0]
 8001c1a:	b103      	cbz	r3, 8001c1e <_close_r+0x1a>
 8001c1c:	6023      	str	r3, [r4, #0]
 8001c1e:	bd38      	pop	{r3, r4, r5, pc}
 8001c20:	20000354 	.word	0x20000354

08001c24 <_lseek_r>:
 8001c24:	b538      	push	{r3, r4, r5, lr}
 8001c26:	4604      	mov	r4, r0
 8001c28:	4608      	mov	r0, r1
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4d05      	ldr	r5, [pc, #20]	@ (8001c44 <_lseek_r+0x20>)
 8001c30:	602a      	str	r2, [r5, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	f7fe ff3f 	bl	8000ab6 <_lseek>
 8001c38:	1c43      	adds	r3, r0, #1
 8001c3a:	d102      	bne.n	8001c42 <_lseek_r+0x1e>
 8001c3c:	682b      	ldr	r3, [r5, #0]
 8001c3e:	b103      	cbz	r3, 8001c42 <_lseek_r+0x1e>
 8001c40:	6023      	str	r3, [r4, #0]
 8001c42:	bd38      	pop	{r3, r4, r5, pc}
 8001c44:	20000354 	.word	0x20000354

08001c48 <_read_r>:
 8001c48:	b538      	push	{r3, r4, r5, lr}
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	4611      	mov	r1, r2
 8001c50:	2200      	movs	r2, #0
 8001c52:	4d05      	ldr	r5, [pc, #20]	@ (8001c68 <_read_r+0x20>)
 8001c54:	602a      	str	r2, [r5, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f7fe fed0 	bl	80009fc <_read>
 8001c5c:	1c43      	adds	r3, r0, #1
 8001c5e:	d102      	bne.n	8001c66 <_read_r+0x1e>
 8001c60:	682b      	ldr	r3, [r5, #0]
 8001c62:	b103      	cbz	r3, 8001c66 <_read_r+0x1e>
 8001c64:	6023      	str	r3, [r4, #0]
 8001c66:	bd38      	pop	{r3, r4, r5, pc}
 8001c68:	20000354 	.word	0x20000354

08001c6c <_write_r>:
 8001c6c:	b538      	push	{r3, r4, r5, lr}
 8001c6e:	4604      	mov	r4, r0
 8001c70:	4608      	mov	r0, r1
 8001c72:	4611      	mov	r1, r2
 8001c74:	2200      	movs	r2, #0
 8001c76:	4d05      	ldr	r5, [pc, #20]	@ (8001c8c <_write_r+0x20>)
 8001c78:	602a      	str	r2, [r5, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f7fe fedb 	bl	8000a36 <_write>
 8001c80:	1c43      	adds	r3, r0, #1
 8001c82:	d102      	bne.n	8001c8a <_write_r+0x1e>
 8001c84:	682b      	ldr	r3, [r5, #0]
 8001c86:	b103      	cbz	r3, 8001c8a <_write_r+0x1e>
 8001c88:	6023      	str	r3, [r4, #0]
 8001c8a:	bd38      	pop	{r3, r4, r5, pc}
 8001c8c:	20000354 	.word	0x20000354

08001c90 <__errno>:
 8001c90:	4b01      	ldr	r3, [pc, #4]	@ (8001c98 <__errno+0x8>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2000012c 	.word	0x2000012c

08001c9c <__libc_init_array>:
 8001c9c:	b570      	push	{r4, r5, r6, lr}
 8001c9e:	2600      	movs	r6, #0
 8001ca0:	4d0c      	ldr	r5, [pc, #48]	@ (8001cd4 <__libc_init_array+0x38>)
 8001ca2:	4c0d      	ldr	r4, [pc, #52]	@ (8001cd8 <__libc_init_array+0x3c>)
 8001ca4:	1b64      	subs	r4, r4, r5
 8001ca6:	10a4      	asrs	r4, r4, #2
 8001ca8:	42a6      	cmp	r6, r4
 8001caa:	d109      	bne.n	8001cc0 <__libc_init_array+0x24>
 8001cac:	f000 fdc4 	bl	8002838 <_init>
 8001cb0:	2600      	movs	r6, #0
 8001cb2:	4d0a      	ldr	r5, [pc, #40]	@ (8001cdc <__libc_init_array+0x40>)
 8001cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce0 <__libc_init_array+0x44>)
 8001cb6:	1b64      	subs	r4, r4, r5
 8001cb8:	10a4      	asrs	r4, r4, #2
 8001cba:	42a6      	cmp	r6, r4
 8001cbc:	d105      	bne.n	8001cca <__libc_init_array+0x2e>
 8001cbe:	bd70      	pop	{r4, r5, r6, pc}
 8001cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cc4:	4798      	blx	r3
 8001cc6:	3601      	adds	r6, #1
 8001cc8:	e7ee      	b.n	8001ca8 <__libc_init_array+0xc>
 8001cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cce:	4798      	blx	r3
 8001cd0:	3601      	adds	r6, #1
 8001cd2:	e7f2      	b.n	8001cba <__libc_init_array+0x1e>
 8001cd4:	080028c8 	.word	0x080028c8
 8001cd8:	080028c8 	.word	0x080028c8
 8001cdc:	080028c8 	.word	0x080028c8
 8001ce0:	080028cc 	.word	0x080028cc

08001ce4 <__retarget_lock_init_recursive>:
 8001ce4:	4770      	bx	lr

08001ce6 <__retarget_lock_acquire_recursive>:
 8001ce6:	4770      	bx	lr

08001ce8 <__retarget_lock_release_recursive>:
 8001ce8:	4770      	bx	lr
	...

08001cec <_free_r>:
 8001cec:	b538      	push	{r3, r4, r5, lr}
 8001cee:	4605      	mov	r5, r0
 8001cf0:	2900      	cmp	r1, #0
 8001cf2:	d040      	beq.n	8001d76 <_free_r+0x8a>
 8001cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cf8:	1f0c      	subs	r4, r1, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bfb8      	it	lt
 8001cfe:	18e4      	addlt	r4, r4, r3
 8001d00:	f000 f8de 	bl	8001ec0 <__malloc_lock>
 8001d04:	4a1c      	ldr	r2, [pc, #112]	@ (8001d78 <_free_r+0x8c>)
 8001d06:	6813      	ldr	r3, [r2, #0]
 8001d08:	b933      	cbnz	r3, 8001d18 <_free_r+0x2c>
 8001d0a:	6063      	str	r3, [r4, #4]
 8001d0c:	6014      	str	r4, [r2, #0]
 8001d0e:	4628      	mov	r0, r5
 8001d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d14:	f000 b8da 	b.w	8001ecc <__malloc_unlock>
 8001d18:	42a3      	cmp	r3, r4
 8001d1a:	d908      	bls.n	8001d2e <_free_r+0x42>
 8001d1c:	6820      	ldr	r0, [r4, #0]
 8001d1e:	1821      	adds	r1, r4, r0
 8001d20:	428b      	cmp	r3, r1
 8001d22:	bf01      	itttt	eq
 8001d24:	6819      	ldreq	r1, [r3, #0]
 8001d26:	685b      	ldreq	r3, [r3, #4]
 8001d28:	1809      	addeq	r1, r1, r0
 8001d2a:	6021      	streq	r1, [r4, #0]
 8001d2c:	e7ed      	b.n	8001d0a <_free_r+0x1e>
 8001d2e:	461a      	mov	r2, r3
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	b10b      	cbz	r3, 8001d38 <_free_r+0x4c>
 8001d34:	42a3      	cmp	r3, r4
 8001d36:	d9fa      	bls.n	8001d2e <_free_r+0x42>
 8001d38:	6811      	ldr	r1, [r2, #0]
 8001d3a:	1850      	adds	r0, r2, r1
 8001d3c:	42a0      	cmp	r0, r4
 8001d3e:	d10b      	bne.n	8001d58 <_free_r+0x6c>
 8001d40:	6820      	ldr	r0, [r4, #0]
 8001d42:	4401      	add	r1, r0
 8001d44:	1850      	adds	r0, r2, r1
 8001d46:	4283      	cmp	r3, r0
 8001d48:	6011      	str	r1, [r2, #0]
 8001d4a:	d1e0      	bne.n	8001d0e <_free_r+0x22>
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4408      	add	r0, r1
 8001d52:	6010      	str	r0, [r2, #0]
 8001d54:	6053      	str	r3, [r2, #4]
 8001d56:	e7da      	b.n	8001d0e <_free_r+0x22>
 8001d58:	d902      	bls.n	8001d60 <_free_r+0x74>
 8001d5a:	230c      	movs	r3, #12
 8001d5c:	602b      	str	r3, [r5, #0]
 8001d5e:	e7d6      	b.n	8001d0e <_free_r+0x22>
 8001d60:	6820      	ldr	r0, [r4, #0]
 8001d62:	1821      	adds	r1, r4, r0
 8001d64:	428b      	cmp	r3, r1
 8001d66:	bf01      	itttt	eq
 8001d68:	6819      	ldreq	r1, [r3, #0]
 8001d6a:	685b      	ldreq	r3, [r3, #4]
 8001d6c:	1809      	addeq	r1, r1, r0
 8001d6e:	6021      	streq	r1, [r4, #0]
 8001d70:	6063      	str	r3, [r4, #4]
 8001d72:	6054      	str	r4, [r2, #4]
 8001d74:	e7cb      	b.n	8001d0e <_free_r+0x22>
 8001d76:	bd38      	pop	{r3, r4, r5, pc}
 8001d78:	20000360 	.word	0x20000360

08001d7c <sbrk_aligned>:
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	4e0f      	ldr	r6, [pc, #60]	@ (8001dbc <sbrk_aligned+0x40>)
 8001d80:	460c      	mov	r4, r1
 8001d82:	6831      	ldr	r1, [r6, #0]
 8001d84:	4605      	mov	r5, r0
 8001d86:	b911      	cbnz	r1, 8001d8e <sbrk_aligned+0x12>
 8001d88:	f000 fcb4 	bl	80026f4 <_sbrk_r>
 8001d8c:	6030      	str	r0, [r6, #0]
 8001d8e:	4621      	mov	r1, r4
 8001d90:	4628      	mov	r0, r5
 8001d92:	f000 fcaf 	bl	80026f4 <_sbrk_r>
 8001d96:	1c43      	adds	r3, r0, #1
 8001d98:	d103      	bne.n	8001da2 <sbrk_aligned+0x26>
 8001d9a:	f04f 34ff 	mov.w	r4, #4294967295
 8001d9e:	4620      	mov	r0, r4
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
 8001da2:	1cc4      	adds	r4, r0, #3
 8001da4:	f024 0403 	bic.w	r4, r4, #3
 8001da8:	42a0      	cmp	r0, r4
 8001daa:	d0f8      	beq.n	8001d9e <sbrk_aligned+0x22>
 8001dac:	1a21      	subs	r1, r4, r0
 8001dae:	4628      	mov	r0, r5
 8001db0:	f000 fca0 	bl	80026f4 <_sbrk_r>
 8001db4:	3001      	adds	r0, #1
 8001db6:	d1f2      	bne.n	8001d9e <sbrk_aligned+0x22>
 8001db8:	e7ef      	b.n	8001d9a <sbrk_aligned+0x1e>
 8001dba:	bf00      	nop
 8001dbc:	2000035c 	.word	0x2000035c

08001dc0 <_malloc_r>:
 8001dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dc4:	1ccd      	adds	r5, r1, #3
 8001dc6:	f025 0503 	bic.w	r5, r5, #3
 8001dca:	3508      	adds	r5, #8
 8001dcc:	2d0c      	cmp	r5, #12
 8001dce:	bf38      	it	cc
 8001dd0:	250c      	movcc	r5, #12
 8001dd2:	2d00      	cmp	r5, #0
 8001dd4:	4606      	mov	r6, r0
 8001dd6:	db01      	blt.n	8001ddc <_malloc_r+0x1c>
 8001dd8:	42a9      	cmp	r1, r5
 8001dda:	d904      	bls.n	8001de6 <_malloc_r+0x26>
 8001ddc:	230c      	movs	r3, #12
 8001dde:	6033      	str	r3, [r6, #0]
 8001de0:	2000      	movs	r0, #0
 8001de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001de6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ebc <_malloc_r+0xfc>
 8001dea:	f000 f869 	bl	8001ec0 <__malloc_lock>
 8001dee:	f8d8 3000 	ldr.w	r3, [r8]
 8001df2:	461c      	mov	r4, r3
 8001df4:	bb44      	cbnz	r4, 8001e48 <_malloc_r+0x88>
 8001df6:	4629      	mov	r1, r5
 8001df8:	4630      	mov	r0, r6
 8001dfa:	f7ff ffbf 	bl	8001d7c <sbrk_aligned>
 8001dfe:	1c43      	adds	r3, r0, #1
 8001e00:	4604      	mov	r4, r0
 8001e02:	d158      	bne.n	8001eb6 <_malloc_r+0xf6>
 8001e04:	f8d8 4000 	ldr.w	r4, [r8]
 8001e08:	4627      	mov	r7, r4
 8001e0a:	2f00      	cmp	r7, #0
 8001e0c:	d143      	bne.n	8001e96 <_malloc_r+0xd6>
 8001e0e:	2c00      	cmp	r4, #0
 8001e10:	d04b      	beq.n	8001eaa <_malloc_r+0xea>
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	4639      	mov	r1, r7
 8001e16:	4630      	mov	r0, r6
 8001e18:	eb04 0903 	add.w	r9, r4, r3
 8001e1c:	f000 fc6a 	bl	80026f4 <_sbrk_r>
 8001e20:	4581      	cmp	r9, r0
 8001e22:	d142      	bne.n	8001eaa <_malloc_r+0xea>
 8001e24:	6821      	ldr	r1, [r4, #0]
 8001e26:	4630      	mov	r0, r6
 8001e28:	1a6d      	subs	r5, r5, r1
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	f7ff ffa6 	bl	8001d7c <sbrk_aligned>
 8001e30:	3001      	adds	r0, #1
 8001e32:	d03a      	beq.n	8001eaa <_malloc_r+0xea>
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	442b      	add	r3, r5
 8001e38:	6023      	str	r3, [r4, #0]
 8001e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	bb62      	cbnz	r2, 8001e9c <_malloc_r+0xdc>
 8001e42:	f8c8 7000 	str.w	r7, [r8]
 8001e46:	e00f      	b.n	8001e68 <_malloc_r+0xa8>
 8001e48:	6822      	ldr	r2, [r4, #0]
 8001e4a:	1b52      	subs	r2, r2, r5
 8001e4c:	d420      	bmi.n	8001e90 <_malloc_r+0xd0>
 8001e4e:	2a0b      	cmp	r2, #11
 8001e50:	d917      	bls.n	8001e82 <_malloc_r+0xc2>
 8001e52:	1961      	adds	r1, r4, r5
 8001e54:	42a3      	cmp	r3, r4
 8001e56:	6025      	str	r5, [r4, #0]
 8001e58:	bf18      	it	ne
 8001e5a:	6059      	strne	r1, [r3, #4]
 8001e5c:	6863      	ldr	r3, [r4, #4]
 8001e5e:	bf08      	it	eq
 8001e60:	f8c8 1000 	streq.w	r1, [r8]
 8001e64:	5162      	str	r2, [r4, r5]
 8001e66:	604b      	str	r3, [r1, #4]
 8001e68:	4630      	mov	r0, r6
 8001e6a:	f000 f82f 	bl	8001ecc <__malloc_unlock>
 8001e6e:	f104 000b 	add.w	r0, r4, #11
 8001e72:	1d23      	adds	r3, r4, #4
 8001e74:	f020 0007 	bic.w	r0, r0, #7
 8001e78:	1ac2      	subs	r2, r0, r3
 8001e7a:	bf1c      	itt	ne
 8001e7c:	1a1b      	subne	r3, r3, r0
 8001e7e:	50a3      	strne	r3, [r4, r2]
 8001e80:	e7af      	b.n	8001de2 <_malloc_r+0x22>
 8001e82:	6862      	ldr	r2, [r4, #4]
 8001e84:	42a3      	cmp	r3, r4
 8001e86:	bf0c      	ite	eq
 8001e88:	f8c8 2000 	streq.w	r2, [r8]
 8001e8c:	605a      	strne	r2, [r3, #4]
 8001e8e:	e7eb      	b.n	8001e68 <_malloc_r+0xa8>
 8001e90:	4623      	mov	r3, r4
 8001e92:	6864      	ldr	r4, [r4, #4]
 8001e94:	e7ae      	b.n	8001df4 <_malloc_r+0x34>
 8001e96:	463c      	mov	r4, r7
 8001e98:	687f      	ldr	r7, [r7, #4]
 8001e9a:	e7b6      	b.n	8001e0a <_malloc_r+0x4a>
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	42a3      	cmp	r3, r4
 8001ea2:	d1fb      	bne.n	8001e9c <_malloc_r+0xdc>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	6053      	str	r3, [r2, #4]
 8001ea8:	e7de      	b.n	8001e68 <_malloc_r+0xa8>
 8001eaa:	230c      	movs	r3, #12
 8001eac:	4630      	mov	r0, r6
 8001eae:	6033      	str	r3, [r6, #0]
 8001eb0:	f000 f80c 	bl	8001ecc <__malloc_unlock>
 8001eb4:	e794      	b.n	8001de0 <_malloc_r+0x20>
 8001eb6:	6005      	str	r5, [r0, #0]
 8001eb8:	e7d6      	b.n	8001e68 <_malloc_r+0xa8>
 8001eba:	bf00      	nop
 8001ebc:	20000360 	.word	0x20000360

08001ec0 <__malloc_lock>:
 8001ec0:	4801      	ldr	r0, [pc, #4]	@ (8001ec8 <__malloc_lock+0x8>)
 8001ec2:	f7ff bf10 	b.w	8001ce6 <__retarget_lock_acquire_recursive>
 8001ec6:	bf00      	nop
 8001ec8:	20000358 	.word	0x20000358

08001ecc <__malloc_unlock>:
 8001ecc:	4801      	ldr	r0, [pc, #4]	@ (8001ed4 <__malloc_unlock+0x8>)
 8001ece:	f7ff bf0b 	b.w	8001ce8 <__retarget_lock_release_recursive>
 8001ed2:	bf00      	nop
 8001ed4:	20000358 	.word	0x20000358

08001ed8 <__sfputc_r>:
 8001ed8:	6893      	ldr	r3, [r2, #8]
 8001eda:	b410      	push	{r4}
 8001edc:	3b01      	subs	r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	6093      	str	r3, [r2, #8]
 8001ee2:	da07      	bge.n	8001ef4 <__sfputc_r+0x1c>
 8001ee4:	6994      	ldr	r4, [r2, #24]
 8001ee6:	42a3      	cmp	r3, r4
 8001ee8:	db01      	blt.n	8001eee <__sfputc_r+0x16>
 8001eea:	290a      	cmp	r1, #10
 8001eec:	d102      	bne.n	8001ef4 <__sfputc_r+0x1c>
 8001eee:	bc10      	pop	{r4}
 8001ef0:	f000 bb6c 	b.w	80025cc <__swbuf_r>
 8001ef4:	6813      	ldr	r3, [r2, #0]
 8001ef6:	1c58      	adds	r0, r3, #1
 8001ef8:	6010      	str	r0, [r2, #0]
 8001efa:	7019      	strb	r1, [r3, #0]
 8001efc:	4608      	mov	r0, r1
 8001efe:	bc10      	pop	{r4}
 8001f00:	4770      	bx	lr

08001f02 <__sfputs_r>:
 8001f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f04:	4606      	mov	r6, r0
 8001f06:	460f      	mov	r7, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	18d5      	adds	r5, r2, r3
 8001f0c:	42ac      	cmp	r4, r5
 8001f0e:	d101      	bne.n	8001f14 <__sfputs_r+0x12>
 8001f10:	2000      	movs	r0, #0
 8001f12:	e007      	b.n	8001f24 <__sfputs_r+0x22>
 8001f14:	463a      	mov	r2, r7
 8001f16:	4630      	mov	r0, r6
 8001f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f1c:	f7ff ffdc 	bl	8001ed8 <__sfputc_r>
 8001f20:	1c43      	adds	r3, r0, #1
 8001f22:	d1f3      	bne.n	8001f0c <__sfputs_r+0xa>
 8001f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f28 <_vfiprintf_r>:
 8001f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f2c:	460d      	mov	r5, r1
 8001f2e:	4614      	mov	r4, r2
 8001f30:	4698      	mov	r8, r3
 8001f32:	4606      	mov	r6, r0
 8001f34:	b09d      	sub	sp, #116	@ 0x74
 8001f36:	b118      	cbz	r0, 8001f40 <_vfiprintf_r+0x18>
 8001f38:	6a03      	ldr	r3, [r0, #32]
 8001f3a:	b90b      	cbnz	r3, 8001f40 <_vfiprintf_r+0x18>
 8001f3c:	f7ff fdce 	bl	8001adc <__sinit>
 8001f40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f42:	07d9      	lsls	r1, r3, #31
 8001f44:	d405      	bmi.n	8001f52 <_vfiprintf_r+0x2a>
 8001f46:	89ab      	ldrh	r3, [r5, #12]
 8001f48:	059a      	lsls	r2, r3, #22
 8001f4a:	d402      	bmi.n	8001f52 <_vfiprintf_r+0x2a>
 8001f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f4e:	f7ff feca 	bl	8001ce6 <__retarget_lock_acquire_recursive>
 8001f52:	89ab      	ldrh	r3, [r5, #12]
 8001f54:	071b      	lsls	r3, r3, #28
 8001f56:	d501      	bpl.n	8001f5c <_vfiprintf_r+0x34>
 8001f58:	692b      	ldr	r3, [r5, #16]
 8001f5a:	b99b      	cbnz	r3, 8001f84 <_vfiprintf_r+0x5c>
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	4630      	mov	r0, r6
 8001f60:	f000 fb72 	bl	8002648 <__swsetup_r>
 8001f64:	b170      	cbz	r0, 8001f84 <_vfiprintf_r+0x5c>
 8001f66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f68:	07dc      	lsls	r4, r3, #31
 8001f6a:	d504      	bpl.n	8001f76 <_vfiprintf_r+0x4e>
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	b01d      	add	sp, #116	@ 0x74
 8001f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f76:	89ab      	ldrh	r3, [r5, #12]
 8001f78:	0598      	lsls	r0, r3, #22
 8001f7a:	d4f7      	bmi.n	8001f6c <_vfiprintf_r+0x44>
 8001f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f7e:	f7ff feb3 	bl	8001ce8 <__retarget_lock_release_recursive>
 8001f82:	e7f3      	b.n	8001f6c <_vfiprintf_r+0x44>
 8001f84:	2300      	movs	r3, #0
 8001f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f88:	2320      	movs	r3, #32
 8001f8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001f8e:	2330      	movs	r3, #48	@ 0x30
 8001f90:	f04f 0901 	mov.w	r9, #1
 8001f94:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f98:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002144 <_vfiprintf_r+0x21c>
 8001f9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	469a      	mov	sl, r3
 8001fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001fa8:	b10a      	cbz	r2, 8001fae <_vfiprintf_r+0x86>
 8001faa:	2a25      	cmp	r2, #37	@ 0x25
 8001fac:	d1f9      	bne.n	8001fa2 <_vfiprintf_r+0x7a>
 8001fae:	ebba 0b04 	subs.w	fp, sl, r4
 8001fb2:	d00b      	beq.n	8001fcc <_vfiprintf_r+0xa4>
 8001fb4:	465b      	mov	r3, fp
 8001fb6:	4622      	mov	r2, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f7ff ffa1 	bl	8001f02 <__sfputs_r>
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	f000 80a7 	beq.w	8002114 <_vfiprintf_r+0x1ec>
 8001fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001fc8:	445a      	add	r2, fp
 8001fca:	9209      	str	r2, [sp, #36]	@ 0x24
 8001fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 809f 	beq.w	8002114 <_vfiprintf_r+0x1ec>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fe0:	f10a 0a01 	add.w	sl, sl, #1
 8001fe4:	9304      	str	r3, [sp, #16]
 8001fe6:	9307      	str	r3, [sp, #28]
 8001fe8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001fec:	931a      	str	r3, [sp, #104]	@ 0x68
 8001fee:	4654      	mov	r4, sl
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ff6:	4853      	ldr	r0, [pc, #332]	@ (8002144 <_vfiprintf_r+0x21c>)
 8001ff8:	f000 fb8c 	bl	8002714 <memchr>
 8001ffc:	9a04      	ldr	r2, [sp, #16]
 8001ffe:	b9d8      	cbnz	r0, 8002038 <_vfiprintf_r+0x110>
 8002000:	06d1      	lsls	r1, r2, #27
 8002002:	bf44      	itt	mi
 8002004:	2320      	movmi	r3, #32
 8002006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800200a:	0713      	lsls	r3, r2, #28
 800200c:	bf44      	itt	mi
 800200e:	232b      	movmi	r3, #43	@ 0x2b
 8002010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002014:	f89a 3000 	ldrb.w	r3, [sl]
 8002018:	2b2a      	cmp	r3, #42	@ 0x2a
 800201a:	d015      	beq.n	8002048 <_vfiprintf_r+0x120>
 800201c:	4654      	mov	r4, sl
 800201e:	2000      	movs	r0, #0
 8002020:	f04f 0c0a 	mov.w	ip, #10
 8002024:	9a07      	ldr	r2, [sp, #28]
 8002026:	4621      	mov	r1, r4
 8002028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800202c:	3b30      	subs	r3, #48	@ 0x30
 800202e:	2b09      	cmp	r3, #9
 8002030:	d94b      	bls.n	80020ca <_vfiprintf_r+0x1a2>
 8002032:	b1b0      	cbz	r0, 8002062 <_vfiprintf_r+0x13a>
 8002034:	9207      	str	r2, [sp, #28]
 8002036:	e014      	b.n	8002062 <_vfiprintf_r+0x13a>
 8002038:	eba0 0308 	sub.w	r3, r0, r8
 800203c:	fa09 f303 	lsl.w	r3, r9, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	46a2      	mov	sl, r4
 8002044:	9304      	str	r3, [sp, #16]
 8002046:	e7d2      	b.n	8001fee <_vfiprintf_r+0xc6>
 8002048:	9b03      	ldr	r3, [sp, #12]
 800204a:	1d19      	adds	r1, r3, #4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	9103      	str	r1, [sp, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	bfbb      	ittet	lt
 8002054:	425b      	neglt	r3, r3
 8002056:	f042 0202 	orrlt.w	r2, r2, #2
 800205a:	9307      	strge	r3, [sp, #28]
 800205c:	9307      	strlt	r3, [sp, #28]
 800205e:	bfb8      	it	lt
 8002060:	9204      	strlt	r2, [sp, #16]
 8002062:	7823      	ldrb	r3, [r4, #0]
 8002064:	2b2e      	cmp	r3, #46	@ 0x2e
 8002066:	d10a      	bne.n	800207e <_vfiprintf_r+0x156>
 8002068:	7863      	ldrb	r3, [r4, #1]
 800206a:	2b2a      	cmp	r3, #42	@ 0x2a
 800206c:	d132      	bne.n	80020d4 <_vfiprintf_r+0x1ac>
 800206e:	9b03      	ldr	r3, [sp, #12]
 8002070:	3402      	adds	r4, #2
 8002072:	1d1a      	adds	r2, r3, #4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	9203      	str	r2, [sp, #12]
 8002078:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800207c:	9305      	str	r3, [sp, #20]
 800207e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002148 <_vfiprintf_r+0x220>
 8002082:	2203      	movs	r2, #3
 8002084:	4650      	mov	r0, sl
 8002086:	7821      	ldrb	r1, [r4, #0]
 8002088:	f000 fb44 	bl	8002714 <memchr>
 800208c:	b138      	cbz	r0, 800209e <_vfiprintf_r+0x176>
 800208e:	2240      	movs	r2, #64	@ 0x40
 8002090:	9b04      	ldr	r3, [sp, #16]
 8002092:	eba0 000a 	sub.w	r0, r0, sl
 8002096:	4082      	lsls	r2, r0
 8002098:	4313      	orrs	r3, r2
 800209a:	3401      	adds	r4, #1
 800209c:	9304      	str	r3, [sp, #16]
 800209e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020a2:	2206      	movs	r2, #6
 80020a4:	4829      	ldr	r0, [pc, #164]	@ (800214c <_vfiprintf_r+0x224>)
 80020a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80020aa:	f000 fb33 	bl	8002714 <memchr>
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d03f      	beq.n	8002132 <_vfiprintf_r+0x20a>
 80020b2:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <_vfiprintf_r+0x228>)
 80020b4:	bb1b      	cbnz	r3, 80020fe <_vfiprintf_r+0x1d6>
 80020b6:	9b03      	ldr	r3, [sp, #12]
 80020b8:	3307      	adds	r3, #7
 80020ba:	f023 0307 	bic.w	r3, r3, #7
 80020be:	3308      	adds	r3, #8
 80020c0:	9303      	str	r3, [sp, #12]
 80020c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80020c4:	443b      	add	r3, r7
 80020c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80020c8:	e76a      	b.n	8001fa0 <_vfiprintf_r+0x78>
 80020ca:	460c      	mov	r4, r1
 80020cc:	2001      	movs	r0, #1
 80020ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80020d2:	e7a8      	b.n	8002026 <_vfiprintf_r+0xfe>
 80020d4:	2300      	movs	r3, #0
 80020d6:	f04f 0c0a 	mov.w	ip, #10
 80020da:	4619      	mov	r1, r3
 80020dc:	3401      	adds	r4, #1
 80020de:	9305      	str	r3, [sp, #20]
 80020e0:	4620      	mov	r0, r4
 80020e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020e6:	3a30      	subs	r2, #48	@ 0x30
 80020e8:	2a09      	cmp	r2, #9
 80020ea:	d903      	bls.n	80020f4 <_vfiprintf_r+0x1cc>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0c6      	beq.n	800207e <_vfiprintf_r+0x156>
 80020f0:	9105      	str	r1, [sp, #20]
 80020f2:	e7c4      	b.n	800207e <_vfiprintf_r+0x156>
 80020f4:	4604      	mov	r4, r0
 80020f6:	2301      	movs	r3, #1
 80020f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80020fc:	e7f0      	b.n	80020e0 <_vfiprintf_r+0x1b8>
 80020fe:	ab03      	add	r3, sp, #12
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	462a      	mov	r2, r5
 8002104:	4630      	mov	r0, r6
 8002106:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <_vfiprintf_r+0x22c>)
 8002108:	a904      	add	r1, sp, #16
 800210a:	f3af 8000 	nop.w
 800210e:	4607      	mov	r7, r0
 8002110:	1c78      	adds	r0, r7, #1
 8002112:	d1d6      	bne.n	80020c2 <_vfiprintf_r+0x19a>
 8002114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002116:	07d9      	lsls	r1, r3, #31
 8002118:	d405      	bmi.n	8002126 <_vfiprintf_r+0x1fe>
 800211a:	89ab      	ldrh	r3, [r5, #12]
 800211c:	059a      	lsls	r2, r3, #22
 800211e:	d402      	bmi.n	8002126 <_vfiprintf_r+0x1fe>
 8002120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002122:	f7ff fde1 	bl	8001ce8 <__retarget_lock_release_recursive>
 8002126:	89ab      	ldrh	r3, [r5, #12]
 8002128:	065b      	lsls	r3, r3, #25
 800212a:	f53f af1f 	bmi.w	8001f6c <_vfiprintf_r+0x44>
 800212e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002130:	e71e      	b.n	8001f70 <_vfiprintf_r+0x48>
 8002132:	ab03      	add	r3, sp, #12
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	462a      	mov	r2, r5
 8002138:	4630      	mov	r0, r6
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <_vfiprintf_r+0x22c>)
 800213c:	a904      	add	r1, sp, #16
 800213e:	f000 f87d 	bl	800223c <_printf_i>
 8002142:	e7e4      	b.n	800210e <_vfiprintf_r+0x1e6>
 8002144:	08002892 	.word	0x08002892
 8002148:	08002898 	.word	0x08002898
 800214c:	0800289c 	.word	0x0800289c
 8002150:	00000000 	.word	0x00000000
 8002154:	08001f03 	.word	0x08001f03

08002158 <_printf_common>:
 8002158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800215c:	4616      	mov	r6, r2
 800215e:	4698      	mov	r8, r3
 8002160:	688a      	ldr	r2, [r1, #8]
 8002162:	690b      	ldr	r3, [r1, #16]
 8002164:	4607      	mov	r7, r0
 8002166:	4293      	cmp	r3, r2
 8002168:	bfb8      	it	lt
 800216a:	4613      	movlt	r3, r2
 800216c:	6033      	str	r3, [r6, #0]
 800216e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002172:	460c      	mov	r4, r1
 8002174:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002178:	b10a      	cbz	r2, 800217e <_printf_common+0x26>
 800217a:	3301      	adds	r3, #1
 800217c:	6033      	str	r3, [r6, #0]
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	0699      	lsls	r1, r3, #26
 8002182:	bf42      	ittt	mi
 8002184:	6833      	ldrmi	r3, [r6, #0]
 8002186:	3302      	addmi	r3, #2
 8002188:	6033      	strmi	r3, [r6, #0]
 800218a:	6825      	ldr	r5, [r4, #0]
 800218c:	f015 0506 	ands.w	r5, r5, #6
 8002190:	d106      	bne.n	80021a0 <_printf_common+0x48>
 8002192:	f104 0a19 	add.w	sl, r4, #25
 8002196:	68e3      	ldr	r3, [r4, #12]
 8002198:	6832      	ldr	r2, [r6, #0]
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	42ab      	cmp	r3, r5
 800219e:	dc2b      	bgt.n	80021f8 <_printf_common+0xa0>
 80021a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80021a4:	6822      	ldr	r2, [r4, #0]
 80021a6:	3b00      	subs	r3, #0
 80021a8:	bf18      	it	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	0692      	lsls	r2, r2, #26
 80021ae:	d430      	bmi.n	8002212 <_printf_common+0xba>
 80021b0:	4641      	mov	r1, r8
 80021b2:	4638      	mov	r0, r7
 80021b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80021b8:	47c8      	blx	r9
 80021ba:	3001      	adds	r0, #1
 80021bc:	d023      	beq.n	8002206 <_printf_common+0xae>
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	6922      	ldr	r2, [r4, #16]
 80021c2:	f003 0306 	and.w	r3, r3, #6
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf14      	ite	ne
 80021ca:	2500      	movne	r5, #0
 80021cc:	6833      	ldreq	r3, [r6, #0]
 80021ce:	f04f 0600 	mov.w	r6, #0
 80021d2:	bf08      	it	eq
 80021d4:	68e5      	ldreq	r5, [r4, #12]
 80021d6:	f104 041a 	add.w	r4, r4, #26
 80021da:	bf08      	it	eq
 80021dc:	1aed      	subeq	r5, r5, r3
 80021de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80021e2:	bf08      	it	eq
 80021e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021e8:	4293      	cmp	r3, r2
 80021ea:	bfc4      	itt	gt
 80021ec:	1a9b      	subgt	r3, r3, r2
 80021ee:	18ed      	addgt	r5, r5, r3
 80021f0:	42b5      	cmp	r5, r6
 80021f2:	d11a      	bne.n	800222a <_printf_common+0xd2>
 80021f4:	2000      	movs	r0, #0
 80021f6:	e008      	b.n	800220a <_printf_common+0xb2>
 80021f8:	2301      	movs	r3, #1
 80021fa:	4652      	mov	r2, sl
 80021fc:	4641      	mov	r1, r8
 80021fe:	4638      	mov	r0, r7
 8002200:	47c8      	blx	r9
 8002202:	3001      	adds	r0, #1
 8002204:	d103      	bne.n	800220e <_printf_common+0xb6>
 8002206:	f04f 30ff 	mov.w	r0, #4294967295
 800220a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800220e:	3501      	adds	r5, #1
 8002210:	e7c1      	b.n	8002196 <_printf_common+0x3e>
 8002212:	2030      	movs	r0, #48	@ 0x30
 8002214:	18e1      	adds	r1, r4, r3
 8002216:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002220:	4422      	add	r2, r4
 8002222:	3302      	adds	r3, #2
 8002224:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002228:	e7c2      	b.n	80021b0 <_printf_common+0x58>
 800222a:	2301      	movs	r3, #1
 800222c:	4622      	mov	r2, r4
 800222e:	4641      	mov	r1, r8
 8002230:	4638      	mov	r0, r7
 8002232:	47c8      	blx	r9
 8002234:	3001      	adds	r0, #1
 8002236:	d0e6      	beq.n	8002206 <_printf_common+0xae>
 8002238:	3601      	adds	r6, #1
 800223a:	e7d9      	b.n	80021f0 <_printf_common+0x98>

0800223c <_printf_i>:
 800223c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002240:	7e0f      	ldrb	r7, [r1, #24]
 8002242:	4691      	mov	r9, r2
 8002244:	2f78      	cmp	r7, #120	@ 0x78
 8002246:	4680      	mov	r8, r0
 8002248:	460c      	mov	r4, r1
 800224a:	469a      	mov	sl, r3
 800224c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800224e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002252:	d807      	bhi.n	8002264 <_printf_i+0x28>
 8002254:	2f62      	cmp	r7, #98	@ 0x62
 8002256:	d80a      	bhi.n	800226e <_printf_i+0x32>
 8002258:	2f00      	cmp	r7, #0
 800225a:	f000 80d3 	beq.w	8002404 <_printf_i+0x1c8>
 800225e:	2f58      	cmp	r7, #88	@ 0x58
 8002260:	f000 80ba 	beq.w	80023d8 <_printf_i+0x19c>
 8002264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002268:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800226c:	e03a      	b.n	80022e4 <_printf_i+0xa8>
 800226e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002272:	2b15      	cmp	r3, #21
 8002274:	d8f6      	bhi.n	8002264 <_printf_i+0x28>
 8002276:	a101      	add	r1, pc, #4	@ (adr r1, 800227c <_printf_i+0x40>)
 8002278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800227c:	080022d5 	.word	0x080022d5
 8002280:	080022e9 	.word	0x080022e9
 8002284:	08002265 	.word	0x08002265
 8002288:	08002265 	.word	0x08002265
 800228c:	08002265 	.word	0x08002265
 8002290:	08002265 	.word	0x08002265
 8002294:	080022e9 	.word	0x080022e9
 8002298:	08002265 	.word	0x08002265
 800229c:	08002265 	.word	0x08002265
 80022a0:	08002265 	.word	0x08002265
 80022a4:	08002265 	.word	0x08002265
 80022a8:	080023eb 	.word	0x080023eb
 80022ac:	08002313 	.word	0x08002313
 80022b0:	080023a5 	.word	0x080023a5
 80022b4:	08002265 	.word	0x08002265
 80022b8:	08002265 	.word	0x08002265
 80022bc:	0800240d 	.word	0x0800240d
 80022c0:	08002265 	.word	0x08002265
 80022c4:	08002313 	.word	0x08002313
 80022c8:	08002265 	.word	0x08002265
 80022cc:	08002265 	.word	0x08002265
 80022d0:	080023ad 	.word	0x080023ad
 80022d4:	6833      	ldr	r3, [r6, #0]
 80022d6:	1d1a      	adds	r2, r3, #4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6032      	str	r2, [r6, #0]
 80022dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80022e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80022e4:	2301      	movs	r3, #1
 80022e6:	e09e      	b.n	8002426 <_printf_i+0x1ea>
 80022e8:	6833      	ldr	r3, [r6, #0]
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	1d19      	adds	r1, r3, #4
 80022ee:	6031      	str	r1, [r6, #0]
 80022f0:	0606      	lsls	r6, r0, #24
 80022f2:	d501      	bpl.n	80022f8 <_printf_i+0xbc>
 80022f4:	681d      	ldr	r5, [r3, #0]
 80022f6:	e003      	b.n	8002300 <_printf_i+0xc4>
 80022f8:	0645      	lsls	r5, r0, #25
 80022fa:	d5fb      	bpl.n	80022f4 <_printf_i+0xb8>
 80022fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002300:	2d00      	cmp	r5, #0
 8002302:	da03      	bge.n	800230c <_printf_i+0xd0>
 8002304:	232d      	movs	r3, #45	@ 0x2d
 8002306:	426d      	negs	r5, r5
 8002308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800230c:	230a      	movs	r3, #10
 800230e:	4859      	ldr	r0, [pc, #356]	@ (8002474 <_printf_i+0x238>)
 8002310:	e011      	b.n	8002336 <_printf_i+0xfa>
 8002312:	6821      	ldr	r1, [r4, #0]
 8002314:	6833      	ldr	r3, [r6, #0]
 8002316:	0608      	lsls	r0, r1, #24
 8002318:	f853 5b04 	ldr.w	r5, [r3], #4
 800231c:	d402      	bmi.n	8002324 <_printf_i+0xe8>
 800231e:	0649      	lsls	r1, r1, #25
 8002320:	bf48      	it	mi
 8002322:	b2ad      	uxthmi	r5, r5
 8002324:	2f6f      	cmp	r7, #111	@ 0x6f
 8002326:	6033      	str	r3, [r6, #0]
 8002328:	bf14      	ite	ne
 800232a:	230a      	movne	r3, #10
 800232c:	2308      	moveq	r3, #8
 800232e:	4851      	ldr	r0, [pc, #324]	@ (8002474 <_printf_i+0x238>)
 8002330:	2100      	movs	r1, #0
 8002332:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002336:	6866      	ldr	r6, [r4, #4]
 8002338:	2e00      	cmp	r6, #0
 800233a:	bfa8      	it	ge
 800233c:	6821      	ldrge	r1, [r4, #0]
 800233e:	60a6      	str	r6, [r4, #8]
 8002340:	bfa4      	itt	ge
 8002342:	f021 0104 	bicge.w	r1, r1, #4
 8002346:	6021      	strge	r1, [r4, #0]
 8002348:	b90d      	cbnz	r5, 800234e <_printf_i+0x112>
 800234a:	2e00      	cmp	r6, #0
 800234c:	d04b      	beq.n	80023e6 <_printf_i+0x1aa>
 800234e:	4616      	mov	r6, r2
 8002350:	fbb5 f1f3 	udiv	r1, r5, r3
 8002354:	fb03 5711 	mls	r7, r3, r1, r5
 8002358:	5dc7      	ldrb	r7, [r0, r7]
 800235a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800235e:	462f      	mov	r7, r5
 8002360:	42bb      	cmp	r3, r7
 8002362:	460d      	mov	r5, r1
 8002364:	d9f4      	bls.n	8002350 <_printf_i+0x114>
 8002366:	2b08      	cmp	r3, #8
 8002368:	d10b      	bne.n	8002382 <_printf_i+0x146>
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	07df      	lsls	r7, r3, #31
 800236e:	d508      	bpl.n	8002382 <_printf_i+0x146>
 8002370:	6923      	ldr	r3, [r4, #16]
 8002372:	6861      	ldr	r1, [r4, #4]
 8002374:	4299      	cmp	r1, r3
 8002376:	bfde      	ittt	le
 8002378:	2330      	movle	r3, #48	@ 0x30
 800237a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800237e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002382:	1b92      	subs	r2, r2, r6
 8002384:	6122      	str	r2, [r4, #16]
 8002386:	464b      	mov	r3, r9
 8002388:	4621      	mov	r1, r4
 800238a:	4640      	mov	r0, r8
 800238c:	f8cd a000 	str.w	sl, [sp]
 8002390:	aa03      	add	r2, sp, #12
 8002392:	f7ff fee1 	bl	8002158 <_printf_common>
 8002396:	3001      	adds	r0, #1
 8002398:	d14a      	bne.n	8002430 <_printf_i+0x1f4>
 800239a:	f04f 30ff 	mov.w	r0, #4294967295
 800239e:	b004      	add	sp, #16
 80023a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	f043 0320 	orr.w	r3, r3, #32
 80023aa:	6023      	str	r3, [r4, #0]
 80023ac:	2778      	movs	r7, #120	@ 0x78
 80023ae:	4832      	ldr	r0, [pc, #200]	@ (8002478 <_printf_i+0x23c>)
 80023b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	6831      	ldr	r1, [r6, #0]
 80023b8:	061f      	lsls	r7, r3, #24
 80023ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80023be:	d402      	bmi.n	80023c6 <_printf_i+0x18a>
 80023c0:	065f      	lsls	r7, r3, #25
 80023c2:	bf48      	it	mi
 80023c4:	b2ad      	uxthmi	r5, r5
 80023c6:	6031      	str	r1, [r6, #0]
 80023c8:	07d9      	lsls	r1, r3, #31
 80023ca:	bf44      	itt	mi
 80023cc:	f043 0320 	orrmi.w	r3, r3, #32
 80023d0:	6023      	strmi	r3, [r4, #0]
 80023d2:	b11d      	cbz	r5, 80023dc <_printf_i+0x1a0>
 80023d4:	2310      	movs	r3, #16
 80023d6:	e7ab      	b.n	8002330 <_printf_i+0xf4>
 80023d8:	4826      	ldr	r0, [pc, #152]	@ (8002474 <_printf_i+0x238>)
 80023da:	e7e9      	b.n	80023b0 <_printf_i+0x174>
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	f023 0320 	bic.w	r3, r3, #32
 80023e2:	6023      	str	r3, [r4, #0]
 80023e4:	e7f6      	b.n	80023d4 <_printf_i+0x198>
 80023e6:	4616      	mov	r6, r2
 80023e8:	e7bd      	b.n	8002366 <_printf_i+0x12a>
 80023ea:	6833      	ldr	r3, [r6, #0]
 80023ec:	6825      	ldr	r5, [r4, #0]
 80023ee:	1d18      	adds	r0, r3, #4
 80023f0:	6961      	ldr	r1, [r4, #20]
 80023f2:	6030      	str	r0, [r6, #0]
 80023f4:	062e      	lsls	r6, r5, #24
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	d501      	bpl.n	80023fe <_printf_i+0x1c2>
 80023fa:	6019      	str	r1, [r3, #0]
 80023fc:	e002      	b.n	8002404 <_printf_i+0x1c8>
 80023fe:	0668      	lsls	r0, r5, #25
 8002400:	d5fb      	bpl.n	80023fa <_printf_i+0x1be>
 8002402:	8019      	strh	r1, [r3, #0]
 8002404:	2300      	movs	r3, #0
 8002406:	4616      	mov	r6, r2
 8002408:	6123      	str	r3, [r4, #16]
 800240a:	e7bc      	b.n	8002386 <_printf_i+0x14a>
 800240c:	6833      	ldr	r3, [r6, #0]
 800240e:	2100      	movs	r1, #0
 8002410:	1d1a      	adds	r2, r3, #4
 8002412:	6032      	str	r2, [r6, #0]
 8002414:	681e      	ldr	r6, [r3, #0]
 8002416:	6862      	ldr	r2, [r4, #4]
 8002418:	4630      	mov	r0, r6
 800241a:	f000 f97b 	bl	8002714 <memchr>
 800241e:	b108      	cbz	r0, 8002424 <_printf_i+0x1e8>
 8002420:	1b80      	subs	r0, r0, r6
 8002422:	6060      	str	r0, [r4, #4]
 8002424:	6863      	ldr	r3, [r4, #4]
 8002426:	6123      	str	r3, [r4, #16]
 8002428:	2300      	movs	r3, #0
 800242a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800242e:	e7aa      	b.n	8002386 <_printf_i+0x14a>
 8002430:	4632      	mov	r2, r6
 8002432:	4649      	mov	r1, r9
 8002434:	4640      	mov	r0, r8
 8002436:	6923      	ldr	r3, [r4, #16]
 8002438:	47d0      	blx	sl
 800243a:	3001      	adds	r0, #1
 800243c:	d0ad      	beq.n	800239a <_printf_i+0x15e>
 800243e:	6823      	ldr	r3, [r4, #0]
 8002440:	079b      	lsls	r3, r3, #30
 8002442:	d413      	bmi.n	800246c <_printf_i+0x230>
 8002444:	68e0      	ldr	r0, [r4, #12]
 8002446:	9b03      	ldr	r3, [sp, #12]
 8002448:	4298      	cmp	r0, r3
 800244a:	bfb8      	it	lt
 800244c:	4618      	movlt	r0, r3
 800244e:	e7a6      	b.n	800239e <_printf_i+0x162>
 8002450:	2301      	movs	r3, #1
 8002452:	4632      	mov	r2, r6
 8002454:	4649      	mov	r1, r9
 8002456:	4640      	mov	r0, r8
 8002458:	47d0      	blx	sl
 800245a:	3001      	adds	r0, #1
 800245c:	d09d      	beq.n	800239a <_printf_i+0x15e>
 800245e:	3501      	adds	r5, #1
 8002460:	68e3      	ldr	r3, [r4, #12]
 8002462:	9903      	ldr	r1, [sp, #12]
 8002464:	1a5b      	subs	r3, r3, r1
 8002466:	42ab      	cmp	r3, r5
 8002468:	dcf2      	bgt.n	8002450 <_printf_i+0x214>
 800246a:	e7eb      	b.n	8002444 <_printf_i+0x208>
 800246c:	2500      	movs	r5, #0
 800246e:	f104 0619 	add.w	r6, r4, #25
 8002472:	e7f5      	b.n	8002460 <_printf_i+0x224>
 8002474:	080028a3 	.word	0x080028a3
 8002478:	080028b4 	.word	0x080028b4

0800247c <__sflush_r>:
 800247c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	0716      	lsls	r6, r2, #28
 8002484:	4605      	mov	r5, r0
 8002486:	460c      	mov	r4, r1
 8002488:	d454      	bmi.n	8002534 <__sflush_r+0xb8>
 800248a:	684b      	ldr	r3, [r1, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	dc02      	bgt.n	8002496 <__sflush_r+0x1a>
 8002490:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	dd48      	ble.n	8002528 <__sflush_r+0xac>
 8002496:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002498:	2e00      	cmp	r6, #0
 800249a:	d045      	beq.n	8002528 <__sflush_r+0xac>
 800249c:	2300      	movs	r3, #0
 800249e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80024a2:	682f      	ldr	r7, [r5, #0]
 80024a4:	6a21      	ldr	r1, [r4, #32]
 80024a6:	602b      	str	r3, [r5, #0]
 80024a8:	d030      	beq.n	800250c <__sflush_r+0x90>
 80024aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80024ac:	89a3      	ldrh	r3, [r4, #12]
 80024ae:	0759      	lsls	r1, r3, #29
 80024b0:	d505      	bpl.n	80024be <__sflush_r+0x42>
 80024b2:	6863      	ldr	r3, [r4, #4]
 80024b4:	1ad2      	subs	r2, r2, r3
 80024b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80024b8:	b10b      	cbz	r3, 80024be <__sflush_r+0x42>
 80024ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80024bc:	1ad2      	subs	r2, r2, r3
 80024be:	2300      	movs	r3, #0
 80024c0:	4628      	mov	r0, r5
 80024c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80024c4:	6a21      	ldr	r1, [r4, #32]
 80024c6:	47b0      	blx	r6
 80024c8:	1c43      	adds	r3, r0, #1
 80024ca:	89a3      	ldrh	r3, [r4, #12]
 80024cc:	d106      	bne.n	80024dc <__sflush_r+0x60>
 80024ce:	6829      	ldr	r1, [r5, #0]
 80024d0:	291d      	cmp	r1, #29
 80024d2:	d82b      	bhi.n	800252c <__sflush_r+0xb0>
 80024d4:	4a28      	ldr	r2, [pc, #160]	@ (8002578 <__sflush_r+0xfc>)
 80024d6:	410a      	asrs	r2, r1
 80024d8:	07d6      	lsls	r6, r2, #31
 80024da:	d427      	bmi.n	800252c <__sflush_r+0xb0>
 80024dc:	2200      	movs	r2, #0
 80024de:	6062      	str	r2, [r4, #4]
 80024e0:	6922      	ldr	r2, [r4, #16]
 80024e2:	04d9      	lsls	r1, r3, #19
 80024e4:	6022      	str	r2, [r4, #0]
 80024e6:	d504      	bpl.n	80024f2 <__sflush_r+0x76>
 80024e8:	1c42      	adds	r2, r0, #1
 80024ea:	d101      	bne.n	80024f0 <__sflush_r+0x74>
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	b903      	cbnz	r3, 80024f2 <__sflush_r+0x76>
 80024f0:	6560      	str	r0, [r4, #84]	@ 0x54
 80024f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80024f4:	602f      	str	r7, [r5, #0]
 80024f6:	b1b9      	cbz	r1, 8002528 <__sflush_r+0xac>
 80024f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80024fc:	4299      	cmp	r1, r3
 80024fe:	d002      	beq.n	8002506 <__sflush_r+0x8a>
 8002500:	4628      	mov	r0, r5
 8002502:	f7ff fbf3 	bl	8001cec <_free_r>
 8002506:	2300      	movs	r3, #0
 8002508:	6363      	str	r3, [r4, #52]	@ 0x34
 800250a:	e00d      	b.n	8002528 <__sflush_r+0xac>
 800250c:	2301      	movs	r3, #1
 800250e:	4628      	mov	r0, r5
 8002510:	47b0      	blx	r6
 8002512:	4602      	mov	r2, r0
 8002514:	1c50      	adds	r0, r2, #1
 8002516:	d1c9      	bne.n	80024ac <__sflush_r+0x30>
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0c6      	beq.n	80024ac <__sflush_r+0x30>
 800251e:	2b1d      	cmp	r3, #29
 8002520:	d001      	beq.n	8002526 <__sflush_r+0xaa>
 8002522:	2b16      	cmp	r3, #22
 8002524:	d11d      	bne.n	8002562 <__sflush_r+0xe6>
 8002526:	602f      	str	r7, [r5, #0]
 8002528:	2000      	movs	r0, #0
 800252a:	e021      	b.n	8002570 <__sflush_r+0xf4>
 800252c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002530:	b21b      	sxth	r3, r3
 8002532:	e01a      	b.n	800256a <__sflush_r+0xee>
 8002534:	690f      	ldr	r7, [r1, #16]
 8002536:	2f00      	cmp	r7, #0
 8002538:	d0f6      	beq.n	8002528 <__sflush_r+0xac>
 800253a:	0793      	lsls	r3, r2, #30
 800253c:	bf18      	it	ne
 800253e:	2300      	movne	r3, #0
 8002540:	680e      	ldr	r6, [r1, #0]
 8002542:	bf08      	it	eq
 8002544:	694b      	ldreq	r3, [r1, #20]
 8002546:	1bf6      	subs	r6, r6, r7
 8002548:	600f      	str	r7, [r1, #0]
 800254a:	608b      	str	r3, [r1, #8]
 800254c:	2e00      	cmp	r6, #0
 800254e:	ddeb      	ble.n	8002528 <__sflush_r+0xac>
 8002550:	4633      	mov	r3, r6
 8002552:	463a      	mov	r2, r7
 8002554:	4628      	mov	r0, r5
 8002556:	6a21      	ldr	r1, [r4, #32]
 8002558:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800255c:	47e0      	blx	ip
 800255e:	2800      	cmp	r0, #0
 8002560:	dc07      	bgt.n	8002572 <__sflush_r+0xf6>
 8002562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800256a:	f04f 30ff 	mov.w	r0, #4294967295
 800256e:	81a3      	strh	r3, [r4, #12]
 8002570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002572:	4407      	add	r7, r0
 8002574:	1a36      	subs	r6, r6, r0
 8002576:	e7e9      	b.n	800254c <__sflush_r+0xd0>
 8002578:	dfbffffe 	.word	0xdfbffffe

0800257c <_fflush_r>:
 800257c:	b538      	push	{r3, r4, r5, lr}
 800257e:	690b      	ldr	r3, [r1, #16]
 8002580:	4605      	mov	r5, r0
 8002582:	460c      	mov	r4, r1
 8002584:	b913      	cbnz	r3, 800258c <_fflush_r+0x10>
 8002586:	2500      	movs	r5, #0
 8002588:	4628      	mov	r0, r5
 800258a:	bd38      	pop	{r3, r4, r5, pc}
 800258c:	b118      	cbz	r0, 8002596 <_fflush_r+0x1a>
 800258e:	6a03      	ldr	r3, [r0, #32]
 8002590:	b90b      	cbnz	r3, 8002596 <_fflush_r+0x1a>
 8002592:	f7ff faa3 	bl	8001adc <__sinit>
 8002596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f3      	beq.n	8002586 <_fflush_r+0xa>
 800259e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80025a0:	07d0      	lsls	r0, r2, #31
 80025a2:	d404      	bmi.n	80025ae <_fflush_r+0x32>
 80025a4:	0599      	lsls	r1, r3, #22
 80025a6:	d402      	bmi.n	80025ae <_fflush_r+0x32>
 80025a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025aa:	f7ff fb9c 	bl	8001ce6 <__retarget_lock_acquire_recursive>
 80025ae:	4628      	mov	r0, r5
 80025b0:	4621      	mov	r1, r4
 80025b2:	f7ff ff63 	bl	800247c <__sflush_r>
 80025b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80025b8:	4605      	mov	r5, r0
 80025ba:	07da      	lsls	r2, r3, #31
 80025bc:	d4e4      	bmi.n	8002588 <_fflush_r+0xc>
 80025be:	89a3      	ldrh	r3, [r4, #12]
 80025c0:	059b      	lsls	r3, r3, #22
 80025c2:	d4e1      	bmi.n	8002588 <_fflush_r+0xc>
 80025c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025c6:	f7ff fb8f 	bl	8001ce8 <__retarget_lock_release_recursive>
 80025ca:	e7dd      	b.n	8002588 <_fflush_r+0xc>

080025cc <__swbuf_r>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	460e      	mov	r6, r1
 80025d0:	4614      	mov	r4, r2
 80025d2:	4605      	mov	r5, r0
 80025d4:	b118      	cbz	r0, 80025de <__swbuf_r+0x12>
 80025d6:	6a03      	ldr	r3, [r0, #32]
 80025d8:	b90b      	cbnz	r3, 80025de <__swbuf_r+0x12>
 80025da:	f7ff fa7f 	bl	8001adc <__sinit>
 80025de:	69a3      	ldr	r3, [r4, #24]
 80025e0:	60a3      	str	r3, [r4, #8]
 80025e2:	89a3      	ldrh	r3, [r4, #12]
 80025e4:	071a      	lsls	r2, r3, #28
 80025e6:	d501      	bpl.n	80025ec <__swbuf_r+0x20>
 80025e8:	6923      	ldr	r3, [r4, #16]
 80025ea:	b943      	cbnz	r3, 80025fe <__swbuf_r+0x32>
 80025ec:	4621      	mov	r1, r4
 80025ee:	4628      	mov	r0, r5
 80025f0:	f000 f82a 	bl	8002648 <__swsetup_r>
 80025f4:	b118      	cbz	r0, 80025fe <__swbuf_r+0x32>
 80025f6:	f04f 37ff 	mov.w	r7, #4294967295
 80025fa:	4638      	mov	r0, r7
 80025fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	6922      	ldr	r2, [r4, #16]
 8002602:	b2f6      	uxtb	r6, r6
 8002604:	1a98      	subs	r0, r3, r2
 8002606:	6963      	ldr	r3, [r4, #20]
 8002608:	4637      	mov	r7, r6
 800260a:	4283      	cmp	r3, r0
 800260c:	dc05      	bgt.n	800261a <__swbuf_r+0x4e>
 800260e:	4621      	mov	r1, r4
 8002610:	4628      	mov	r0, r5
 8002612:	f7ff ffb3 	bl	800257c <_fflush_r>
 8002616:	2800      	cmp	r0, #0
 8002618:	d1ed      	bne.n	80025f6 <__swbuf_r+0x2a>
 800261a:	68a3      	ldr	r3, [r4, #8]
 800261c:	3b01      	subs	r3, #1
 800261e:	60a3      	str	r3, [r4, #8]
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	6022      	str	r2, [r4, #0]
 8002626:	701e      	strb	r6, [r3, #0]
 8002628:	6962      	ldr	r2, [r4, #20]
 800262a:	1c43      	adds	r3, r0, #1
 800262c:	429a      	cmp	r2, r3
 800262e:	d004      	beq.n	800263a <__swbuf_r+0x6e>
 8002630:	89a3      	ldrh	r3, [r4, #12]
 8002632:	07db      	lsls	r3, r3, #31
 8002634:	d5e1      	bpl.n	80025fa <__swbuf_r+0x2e>
 8002636:	2e0a      	cmp	r6, #10
 8002638:	d1df      	bne.n	80025fa <__swbuf_r+0x2e>
 800263a:	4621      	mov	r1, r4
 800263c:	4628      	mov	r0, r5
 800263e:	f7ff ff9d 	bl	800257c <_fflush_r>
 8002642:	2800      	cmp	r0, #0
 8002644:	d0d9      	beq.n	80025fa <__swbuf_r+0x2e>
 8002646:	e7d6      	b.n	80025f6 <__swbuf_r+0x2a>

08002648 <__swsetup_r>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <__swsetup_r+0xa8>)
 800264c:	4605      	mov	r5, r0
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	460c      	mov	r4, r1
 8002652:	b118      	cbz	r0, 800265c <__swsetup_r+0x14>
 8002654:	6a03      	ldr	r3, [r0, #32]
 8002656:	b90b      	cbnz	r3, 800265c <__swsetup_r+0x14>
 8002658:	f7ff fa40 	bl	8001adc <__sinit>
 800265c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002660:	0719      	lsls	r1, r3, #28
 8002662:	d422      	bmi.n	80026aa <__swsetup_r+0x62>
 8002664:	06da      	lsls	r2, r3, #27
 8002666:	d407      	bmi.n	8002678 <__swsetup_r+0x30>
 8002668:	2209      	movs	r2, #9
 800266a:	602a      	str	r2, [r5, #0]
 800266c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	81a3      	strh	r3, [r4, #12]
 8002676:	e033      	b.n	80026e0 <__swsetup_r+0x98>
 8002678:	0758      	lsls	r0, r3, #29
 800267a:	d512      	bpl.n	80026a2 <__swsetup_r+0x5a>
 800267c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800267e:	b141      	cbz	r1, 8002692 <__swsetup_r+0x4a>
 8002680:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002684:	4299      	cmp	r1, r3
 8002686:	d002      	beq.n	800268e <__swsetup_r+0x46>
 8002688:	4628      	mov	r0, r5
 800268a:	f7ff fb2f 	bl	8001cec <_free_r>
 800268e:	2300      	movs	r3, #0
 8002690:	6363      	str	r3, [r4, #52]	@ 0x34
 8002692:	89a3      	ldrh	r3, [r4, #12]
 8002694:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002698:	81a3      	strh	r3, [r4, #12]
 800269a:	2300      	movs	r3, #0
 800269c:	6063      	str	r3, [r4, #4]
 800269e:	6923      	ldr	r3, [r4, #16]
 80026a0:	6023      	str	r3, [r4, #0]
 80026a2:	89a3      	ldrh	r3, [r4, #12]
 80026a4:	f043 0308 	orr.w	r3, r3, #8
 80026a8:	81a3      	strh	r3, [r4, #12]
 80026aa:	6923      	ldr	r3, [r4, #16]
 80026ac:	b94b      	cbnz	r3, 80026c2 <__swsetup_r+0x7a>
 80026ae:	89a3      	ldrh	r3, [r4, #12]
 80026b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80026b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026b8:	d003      	beq.n	80026c2 <__swsetup_r+0x7a>
 80026ba:	4621      	mov	r1, r4
 80026bc:	4628      	mov	r0, r5
 80026be:	f000 f85c 	bl	800277a <__smakebuf_r>
 80026c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026c6:	f013 0201 	ands.w	r2, r3, #1
 80026ca:	d00a      	beq.n	80026e2 <__swsetup_r+0x9a>
 80026cc:	2200      	movs	r2, #0
 80026ce:	60a2      	str	r2, [r4, #8]
 80026d0:	6962      	ldr	r2, [r4, #20]
 80026d2:	4252      	negs	r2, r2
 80026d4:	61a2      	str	r2, [r4, #24]
 80026d6:	6922      	ldr	r2, [r4, #16]
 80026d8:	b942      	cbnz	r2, 80026ec <__swsetup_r+0xa4>
 80026da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80026de:	d1c5      	bne.n	800266c <__swsetup_r+0x24>
 80026e0:	bd38      	pop	{r3, r4, r5, pc}
 80026e2:	0799      	lsls	r1, r3, #30
 80026e4:	bf58      	it	pl
 80026e6:	6962      	ldrpl	r2, [r4, #20]
 80026e8:	60a2      	str	r2, [r4, #8]
 80026ea:	e7f4      	b.n	80026d6 <__swsetup_r+0x8e>
 80026ec:	2000      	movs	r0, #0
 80026ee:	e7f7      	b.n	80026e0 <__swsetup_r+0x98>
 80026f0:	2000012c 	.word	0x2000012c

080026f4 <_sbrk_r>:
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	2300      	movs	r3, #0
 80026f8:	4d05      	ldr	r5, [pc, #20]	@ (8002710 <_sbrk_r+0x1c>)
 80026fa:	4604      	mov	r4, r0
 80026fc:	4608      	mov	r0, r1
 80026fe:	602b      	str	r3, [r5, #0]
 8002700:	f7fe f9e6 	bl	8000ad0 <_sbrk>
 8002704:	1c43      	adds	r3, r0, #1
 8002706:	d102      	bne.n	800270e <_sbrk_r+0x1a>
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	b103      	cbz	r3, 800270e <_sbrk_r+0x1a>
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	bd38      	pop	{r3, r4, r5, pc}
 8002710:	20000354 	.word	0x20000354

08002714 <memchr>:
 8002714:	4603      	mov	r3, r0
 8002716:	b510      	push	{r4, lr}
 8002718:	b2c9      	uxtb	r1, r1
 800271a:	4402      	add	r2, r0
 800271c:	4293      	cmp	r3, r2
 800271e:	4618      	mov	r0, r3
 8002720:	d101      	bne.n	8002726 <memchr+0x12>
 8002722:	2000      	movs	r0, #0
 8002724:	e003      	b.n	800272e <memchr+0x1a>
 8002726:	7804      	ldrb	r4, [r0, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	428c      	cmp	r4, r1
 800272c:	d1f6      	bne.n	800271c <memchr+0x8>
 800272e:	bd10      	pop	{r4, pc}

08002730 <__swhatbuf_r>:
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	460c      	mov	r4, r1
 8002734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002738:	4615      	mov	r5, r2
 800273a:	2900      	cmp	r1, #0
 800273c:	461e      	mov	r6, r3
 800273e:	b096      	sub	sp, #88	@ 0x58
 8002740:	da0c      	bge.n	800275c <__swhatbuf_r+0x2c>
 8002742:	89a3      	ldrh	r3, [r4, #12]
 8002744:	2100      	movs	r1, #0
 8002746:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800274a:	bf14      	ite	ne
 800274c:	2340      	movne	r3, #64	@ 0x40
 800274e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002752:	2000      	movs	r0, #0
 8002754:	6031      	str	r1, [r6, #0]
 8002756:	602b      	str	r3, [r5, #0]
 8002758:	b016      	add	sp, #88	@ 0x58
 800275a:	bd70      	pop	{r4, r5, r6, pc}
 800275c:	466a      	mov	r2, sp
 800275e:	f000 f849 	bl	80027f4 <_fstat_r>
 8002762:	2800      	cmp	r0, #0
 8002764:	dbed      	blt.n	8002742 <__swhatbuf_r+0x12>
 8002766:	9901      	ldr	r1, [sp, #4]
 8002768:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800276c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002770:	4259      	negs	r1, r3
 8002772:	4159      	adcs	r1, r3
 8002774:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002778:	e7eb      	b.n	8002752 <__swhatbuf_r+0x22>

0800277a <__smakebuf_r>:
 800277a:	898b      	ldrh	r3, [r1, #12]
 800277c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800277e:	079d      	lsls	r5, r3, #30
 8002780:	4606      	mov	r6, r0
 8002782:	460c      	mov	r4, r1
 8002784:	d507      	bpl.n	8002796 <__smakebuf_r+0x1c>
 8002786:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800278a:	6023      	str	r3, [r4, #0]
 800278c:	6123      	str	r3, [r4, #16]
 800278e:	2301      	movs	r3, #1
 8002790:	6163      	str	r3, [r4, #20]
 8002792:	b003      	add	sp, #12
 8002794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002796:	466a      	mov	r2, sp
 8002798:	ab01      	add	r3, sp, #4
 800279a:	f7ff ffc9 	bl	8002730 <__swhatbuf_r>
 800279e:	9f00      	ldr	r7, [sp, #0]
 80027a0:	4605      	mov	r5, r0
 80027a2:	4639      	mov	r1, r7
 80027a4:	4630      	mov	r0, r6
 80027a6:	f7ff fb0b 	bl	8001dc0 <_malloc_r>
 80027aa:	b948      	cbnz	r0, 80027c0 <__smakebuf_r+0x46>
 80027ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027b0:	059a      	lsls	r2, r3, #22
 80027b2:	d4ee      	bmi.n	8002792 <__smakebuf_r+0x18>
 80027b4:	f023 0303 	bic.w	r3, r3, #3
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	81a3      	strh	r3, [r4, #12]
 80027be:	e7e2      	b.n	8002786 <__smakebuf_r+0xc>
 80027c0:	89a3      	ldrh	r3, [r4, #12]
 80027c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80027c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ca:	81a3      	strh	r3, [r4, #12]
 80027cc:	9b01      	ldr	r3, [sp, #4]
 80027ce:	6020      	str	r0, [r4, #0]
 80027d0:	b15b      	cbz	r3, 80027ea <__smakebuf_r+0x70>
 80027d2:	4630      	mov	r0, r6
 80027d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027d8:	f000 f81e 	bl	8002818 <_isatty_r>
 80027dc:	b128      	cbz	r0, 80027ea <__smakebuf_r+0x70>
 80027de:	89a3      	ldrh	r3, [r4, #12]
 80027e0:	f023 0303 	bic.w	r3, r3, #3
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	81a3      	strh	r3, [r4, #12]
 80027ea:	89a3      	ldrh	r3, [r4, #12]
 80027ec:	431d      	orrs	r5, r3
 80027ee:	81a5      	strh	r5, [r4, #12]
 80027f0:	e7cf      	b.n	8002792 <__smakebuf_r+0x18>
	...

080027f4 <_fstat_r>:
 80027f4:	b538      	push	{r3, r4, r5, lr}
 80027f6:	2300      	movs	r3, #0
 80027f8:	4d06      	ldr	r5, [pc, #24]	@ (8002814 <_fstat_r+0x20>)
 80027fa:	4604      	mov	r4, r0
 80027fc:	4608      	mov	r0, r1
 80027fe:	4611      	mov	r1, r2
 8002800:	602b      	str	r3, [r5, #0]
 8002802:	f7fe f93f 	bl	8000a84 <_fstat>
 8002806:	1c43      	adds	r3, r0, #1
 8002808:	d102      	bne.n	8002810 <_fstat_r+0x1c>
 800280a:	682b      	ldr	r3, [r5, #0]
 800280c:	b103      	cbz	r3, 8002810 <_fstat_r+0x1c>
 800280e:	6023      	str	r3, [r4, #0]
 8002810:	bd38      	pop	{r3, r4, r5, pc}
 8002812:	bf00      	nop
 8002814:	20000354 	.word	0x20000354

08002818 <_isatty_r>:
 8002818:	b538      	push	{r3, r4, r5, lr}
 800281a:	2300      	movs	r3, #0
 800281c:	4d05      	ldr	r5, [pc, #20]	@ (8002834 <_isatty_r+0x1c>)
 800281e:	4604      	mov	r4, r0
 8002820:	4608      	mov	r0, r1
 8002822:	602b      	str	r3, [r5, #0]
 8002824:	f7fe f93d 	bl	8000aa2 <_isatty>
 8002828:	1c43      	adds	r3, r0, #1
 800282a:	d102      	bne.n	8002832 <_isatty_r+0x1a>
 800282c:	682b      	ldr	r3, [r5, #0]
 800282e:	b103      	cbz	r3, 8002832 <_isatty_r+0x1a>
 8002830:	6023      	str	r3, [r4, #0]
 8002832:	bd38      	pop	{r3, r4, r5, pc}
 8002834:	20000354 	.word	0x20000354

08002838 <_init>:
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283a:	bf00      	nop
 800283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283e:	bc08      	pop	{r3}
 8002840:	469e      	mov	lr, r3
 8002842:	4770      	bx	lr

08002844 <_fini>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	bf00      	nop
 8002848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284a:	bc08      	pop	{r3}
 800284c:	469e      	mov	lr, r3
 800284e:	4770      	bx	lr
